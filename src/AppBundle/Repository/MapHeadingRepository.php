<?php

namespace AppBundle\Repository;

use AppBundle\Entity\MapHeading;

/**
 * MapHeadingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MapHeadingRepository extends \Doctrine\ORM\EntityRepository
{
    public function count($community,$dateBefore,$dateAfter,$enabled)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('COUNT(c)');
        
        if($community)
        {
            $qb->where('c.community = :community')->setParameter('community', $community);
        }
        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }
        if ($enabled != '' && $enabled != null) {
            $qb->andWhere('c.enabled = :enabled')->setParameter('enabled', $enabled);
        }
        
        $qb->andwhere('c.community = :community')->setParameter('community', $community);
        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $page
     * @param $order
     * @param $community
     * @param $dateBefore
     * @param $dateAfter
     * @param $enabled
     * @return MapHeading[]
     */
    public function search($page, $order,$community,$dateBefore,$dateAfter,$enabled)
    {
        $qb = $this->createQueryBuilder('c');
        if($community)
        {
            $qb->where('c.community = :community')->setParameter('community', $community);
        }
        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }
        if ($enabled != '' && $enabled != null) {
            $qb->andWhere('c.enabled = :enabled')->setParameter('enabled', $enabled);
        }
        if (is_array($order)) {
            foreach ($order as $orderName => $orderType) {
                $qb->orderBy('c.' . $orderName, $orderType);
            }
        }
        $qb->setMaxResults(25)
                ->setFirstResult($page * 25);

        return $qb->getQuery()->getResult();
    }

    public function findAllByCommunity($community)
    {
        $qb = $this->createQueryBuilder('a')

            ->where('a.community = :community')->setParameter('community',$community);
        return $qb;
    }

    /**
     * @param Community $community
     * @return array
     */
    public function findArticleheadingsByCommunity($community)
    {
        $qb = $this->createQueryBuilder('ah')
            ->select('ah.id, ah.title')
            ->innerJoin('ah.community','c')

            ->innerJoin('c.settings','cs')
            ->andWhere('cs.slug = :setting')->setParameter('setting','activate_map')
            ->andwhere('ah.community = :community')->setParameter('community',$community)
            ->andwhere('ah.enabled = :enabled')->setParameter('enabled',true);
        return $qb->getQuery()->getResult();

    }

    /**
     * @param $id
     * @return array
     */
    public function findCommunityLocationByMapHeading($id)
    {
        $qb = $qb = $this->createQueryBuilder('mh')
            ->leftJoin('mh.community','c')
            ->leftJoin('c.city','ci')
            ->select('ci.longitude, ci.latitude')
            ->where('mh.id = :id')->setParameter('id',$id);
        return $qb->getQuery()->getOneOrNullResult();
    }

}
