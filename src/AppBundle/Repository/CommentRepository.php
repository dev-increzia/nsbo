<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Comment;
use Doctrine\ORM\EntityRepository;

/**
 * CommentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentRepository extends EntityRepository
{
    public function count($cityhall = null, $search = null, $type = null, $role = null, $event = null, $article = null, $association = null, $merchant = null, $dateBefore = null, $dateAfter = null)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('COUNT(c)');
        if ($cityhall) {
            $qb->andWhere('c.community = :cityhall')->setParameter('cityhall', $cityhall);
        }
        if ($search) {
            $qb->andWhere('c.content LIKE :search')->setParameter('search', '%' . $search . '%');
        }
        if ($type != '') {
            if ($type == 'event') {
                $qb->andWhere('c.event IS NOT NULL');
                $qb->andWhere('c.article IS NULL');
                if ($event) {
                    $qb->andWhere('c.event = :event')->setParameter('event', $event);
                }
            } elseif ($type == 'article') {
                $qb->andWhere('c.article IS NOT NULL');
                $qb->andWhere('c.event IS NULL');
                if ($article) {
                    $qb->andWhere('c.article = :article')->setParameter('article', $article);
                }
            }
        } else {
            if ($event) {
                $qb->andWhere('c.event = :event')->setParameter('event', $event);
            }
            if ($article) {
                $qb->andWhere('c.article = :article')->setParameter('article', $article);
            }
        }

        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }

        //todo role
        //todo association/merchant
        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $page
     * @param $order
     * @param $cityhall
     * @param $search
     * @param $type
     * @param $role
     * @param $event
     * @param $article
     * @param $association
     * @param $merchant
     * @param null $dateBefore
     * @param null $dateAfter
     * @return Comment[]
     */
    public function search($page, $order, $cityhall, $search, $type, $role, $event, $article, $association, $merchant, $dateBefore = null, $dateAfter = null)
    {
        $qb = $this->createQueryBuilder('c');
        if ($cityhall) {
            $qb->andWhere('c.community = :cityhall')->setParameter('cityhall', $cityhall);
        }
        if ($search) {
            $qb->andWhere('c.content LIKE :search')->setParameter('search', '%' . $search . '%');
        }
        if ($type != '') {
            if ($type == 'event') {
                $qb->andWhere('c.event IS NOT NULL');
                $qb->andWhere('c.article IS NULL');
                if ($event) {
                    $qb->andWhere('c.event = :event')->setParameter('event', $event);
                }
            } elseif ($type == 'article') {
                $qb->andWhere('c.article IS NOT NULL');
                $qb->andWhere('c.event IS NULL');
                if ($article) {
                    $qb->andWhere('c.article = :article')->setParameter('article', $article);
                }
            }
        } else {
            if ($event) {
                $qb->andWhere('c.event = :event')->setParameter('event', $event);
            }
            if ($article) {
                $qb->andWhere('c.article = :article')->setParameter('article', $article);
            }
        }

        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }

        //todo role
        //todo association/merchant

        if (is_array($order)) {
            foreach ($order as $orderName => $orderType) {
                $qb->orderBy('c.' . $orderName, $orderType);
            }
        }
        if ($page !== false) {
            $qb->setMaxResults(10)
                    ->setFirstResult($page * 10);
        }

        return $qb->getQuery()->getResult();
    }

    public function findAssociationArticlesComments($association, $page, $limit)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->join('c.article', 'a');
        $qb->join('a.association', 'asso');
        $qb->where('asso.id = :association');
        $qb->andWhere('c.article IS NOT NULL');
        $qb->setParameter('association', $association->getId());
        $qb->orderBy('c.createAt', 'ASC');
        $qb->setMaxResults($limit)
                ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    public function findAssociationEventsComments($association, $page, $limit)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->join('c.event', 'e');
        $qb->join('e.association', 'a');
        $qb->where('a.id = :association');
        $qb->andWhere('c.event IS NOT NULL');
        $qb->setParameter('association', $association->getId());
        $qb->orderBy('c.createAt', 'ASC');
        $qb->setMaxResults($limit)
                ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    public function findMerchantArticlesComments($merchant, $page, $limit)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->join('c.article', 'a');
        $qb->join('a.merchant', 'm');
        $qb->where('m.id = :merchant');
        $qb->andWhere('c.article IS NOT NULL');
        $qb->setParameter('merchant', $merchant->getId());
        $qb->orderBy('c.createAt', 'ASC');
        $qb->setMaxResults($limit)
                ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    public function findMerchantEventsComments($merchant, $page, $limit)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->join('c.goodPlan', 'e');
        $qb->join('e.merchant', 'm');
        $qb->where('m.id = :merchant');
        $qb->andWhere('c.goodPlan IS NOT NULL');
        $qb->setParameter('merchant', $merchant->getId());
        $qb->orderBy('c.createAt', 'ASC');
        $qb->setMaxResults($limit)
                ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    public function findArticleComments($article)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.id, c.type, c.updateAt, c.content');

        // association
        $qb->leftJoin('c.association', 'assoc');
        $qb->leftJoin('c.image', 'i');
        $qb->addSelect('i.id AS commentImg');
        $qb->leftJoin('c.document', 'doc');
        $qb->addSelect('doc.id AS commentDoc');
        $qb->addSelect('assoc.id AS associationId, assoc.name AS associationName');
        $qb->leftJoin('assoc.image', 'asimg');
        $qb->addSelect('asimg.id AS associationImg');
        // merchant
        $qb->leftJoin('c.merchant', 'm');
        $qb->addSelect('m.id AS merchantId, m.name AS merchantName');
        $qb->leftJoin('m.image', 'mimg');
        $qb->addSelect('mimg.id AS merchantImg');
        // user
        $qb->leftJoin('c.user', 'u');
        $qb->addSelect('u.id AS userId, u.firstname, u.lastname');
        $qb->leftJoin('u.image', 'uimg');
        $qb->addSelect('uimg.id AS userImg');

        $qb->where('c.article = :article');
        $qb->andWhere('c.parent IS NULL');
        $qb->setParameter('article', $article);
        $qb->orderBy('c.createAt', 'ASC');
        return $qb->getQuery()->getResult();
    }

    public function findEventComments($event)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.id, c.type, c.updateAt, c.content');
        $qb->leftJoin('c.image', 'i');
        $qb->addSelect('i.id AS commentImg');

        // association
        $qb->leftJoin('c.association', 'assoc');
        $qb->addSelect('assoc.id AS associationId, assoc.name AS associationName');
        $qb->leftJoin('assoc.image', 'asimg');
        $qb->addSelect('asimg.id AS associationImg');
        // merchant
        $qb->leftJoin('c.merchant', 'm');
        $qb->addSelect('m.id AS merchantId, m.name AS merchantName');
        $qb->leftJoin('m.image', 'mimg');
        $qb->addSelect('mimg.id AS merchantImg');
        // user
        $qb->leftJoin('c.user', 'u');
        $qb->addSelect('u.id AS userId, u.firstname, u.lastname');
        $qb->leftJoin('u.image', 'uimg');
        $qb->addSelect('uimg.id AS userImg');

        $qb->where('c.event = :event');
        $qb->andWhere('c.parent IS NULL');
        $qb->setParameter('event', $event);
        $qb->orderBy('c.createAt', 'ASC');
        return $qb->getQuery()->getResult();
    }

    public function findGoodPlanComments($event)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.id, c.type, c.updateAt, c.content');
        $qb->leftJoin('c.image', 'i');
        $qb->addSelect('i.id AS commentImg');


        // merchant
        $qb->leftJoin('c.merchant', 'm');
        $qb->addSelect('m.id AS merchantId, m.name AS merchantName');
        $qb->leftJoin('m.image', 'mimg');
        $qb->addSelect('mimg.id AS merchantImg');
        // user
        $qb->leftJoin('c.user', 'u');
        $qb->addSelect('u.id AS userId, u.firstname, u.lastname');
        $qb->leftJoin('u.image', 'uimg');
        $qb->addSelect('uimg.id AS userImg');

        $qb->where('c.goodPlan = :event');
        $qb->andWhere('c.parent IS NULL');
        $qb->setParameter('event', $event);
        $qb->orderBy('c.createAt', 'ASC');
        return $qb->getQuery()->getResult();
    }

    public function countArticleComments($article)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('COUNT(c.id)');
        $qb->join('c.article', 'a');
        $qb->andWhere('c.article = :article')->setParameter('article', $article);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countGoodPlanComments($article)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('COUNT(c.id)');
        $qb->join('c.goodPlan', 'a');
        $qb->andWhere('c.goodPlan = :article')->setParameter('article', $article);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countUnreadArticleComments($article)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('COUNT(c.id)');
        $qb->join('c.article', 'a');
        $qb->andWhere('c.article = :article')->setParameter('article', $article);
        $qb->andWhere('c.readed = :readed')->setParameter('readed', false);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countUnreadEventComments($event)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('COUNT(c.id)');
        $qb->join('c.event', 'e');
        $qb->andWhere('c.event = :event')->setParameter('event', $event);
        $qb->andWhere('c.readed = :readed')->setParameter('readed', false);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countUnreadGoodPlanComments($event)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('COUNT(c.id)');
        $qb->join('c.goodPlan', 'e');
        $qb->andWhere('c.goodPlan = :event')->setParameter('event', $event);
        $qb->andWhere('c.readed = :readed')->setParameter('readed', false);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function commentReplies($id)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.id, c.type, c.updateAt, c.content');

        // association
        $qb->leftJoin('c.association', 'assoc');
        $qb->leftJoin('c.image', 'i');
        $qb->addSelect('i.id AS commentImg');
        $qb->leftJoin('c.document', 'doc');
        $qb->addSelect('doc.id AS commentDoc');
        $qb->addSelect('assoc.id AS associationId, assoc.name AS associationName');
        $qb->leftJoin('assoc.image', 'asimg');
        $qb->addSelect('asimg.id AS associationImg');
        // merchant
        $qb->leftJoin('c.merchant', 'm');
        $qb->addSelect('m.id AS merchantId, m.name AS merchantName');
        $qb->leftJoin('m.image', 'mimg');
        $qb->addSelect('mimg.id AS merchantImg');
        // user
        $qb->leftJoin('c.user', 'u');
        $qb->addSelect('u.id AS userId, u.firstname, u.lastname');
        $qb->leftJoin('u.image', 'uimg');
        $qb->addSelect('uimg.id AS userImg');

        $qb->where('c.parent = :id')->setParameter('id', $id);
        return $qb->getQuery()->getResult();
    }

    /*     * **************** V1 ********************** */

    public function findV1ArticleComments($article)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->where('c.article = :article');
        $qb->andWhere('c.parent IS NULL');
        $qb->setParameter('article', $article);
        $qb->orderBy('c.createAt', 'ASC');
        return $qb->getQuery()->getResult();
    }

    public function findV1EventComments($event)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->where('c.event = :event');
        $qb->andWhere('c.parent IS NULL');
        $qb->setParameter('event', $event);
        $qb->orderBy('c.createAt', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    /*** graphisme ****/
    public function findEventPaginationComments($event, $page)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.id, c.type, c.updateAt, c.content');
        $qb->leftJoin('c.image', 'i');
        $qb->addSelect('i.id AS commentImg');

        // association
        $qb->leftJoin('c.association', 'assoc');
        $qb->addSelect('assoc.id AS associationId, assoc.name AS associationName');
        $qb->leftJoin('assoc.image', 'asimg');
        $qb->addSelect('asimg.id AS associationImg');
        // merchant
        $qb->leftJoin('c.merchant', 'm');
        $qb->addSelect('m.id AS merchantId, m.name AS merchantName');
        $qb->leftJoin('m.image', 'mimg');
        $qb->addSelect('mimg.id AS merchantImg');
        // user
        $qb->leftJoin('c.user', 'u');
        $qb->addSelect('u.id AS userId, u.firstname, u.lastname');
        $qb->leftJoin('u.image', 'uimg');
        $qb->addSelect('uimg.id AS userImg');

        $qb->where('c.event = :event');
        $qb->andWhere('c.parent IS NULL');
        $qb->setParameter('event', $event);
        $qb->orderBy('c.createAt', 'ASC');
        $qb->setMaxResults(10)
                ->setFirstResult($page * 10);
        return $qb->getQuery()->getResult();
    }

    /*** graphisme ****/
    public function findGoodPlanPaginationComments($goodPlan, $page)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.id, c.type, c.updateAt, c.content');
        $qb->leftJoin('c.image', 'i');
        $qb->addSelect('i.id AS commentImg');
        $qb->leftJoin('c.document', 'doc');
        $qb->addSelect('doc.id AS commentDoc');

        // association
        $qb->leftJoin('c.association', 'assoc');
        $qb->addSelect('assoc.id AS associationId, assoc.name AS associationName');
        $qb->leftJoin('assoc.image', 'asimg');
        $qb->addSelect('asimg.id AS associationImg');
        // merchant
        $qb->leftJoin('c.merchant', 'm');
        $qb->addSelect('m.id AS merchantId, m.name AS merchantName');
        $qb->leftJoin('m.image', 'mimg');
        $qb->addSelect('mimg.id AS merchantImg');
        // user
        $qb->leftJoin('c.user', 'u');
        $qb->addSelect('u.id AS userId, u.firstname, u.lastname');
        $qb->leftJoin('u.image', 'uimg');
        $qb->addSelect('uimg.id AS userImg');

        $qb->where('c.goodPlan = :goodplan');
        $qb->andWhere('c.parent IS NULL');
        $qb->setParameter('goodplan', $goodPlan);
        $qb->orderBy('c.createAt', 'ASC');
        $qb->setMaxResults(10)
            ->setFirstResult($page * 10);
        return $qb->getQuery()->getResult();
    }


    /*** graphisme ****/
    public function findArticlePaginationComments($article, $page)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.id, c.type, c.updateAt, c.content');

        // association
        $qb->leftJoin('c.association', 'assoc');
        $qb->addSelect('assoc.id AS associationId, assoc.name AS associationName');
        $qb->leftJoin('c.image', 'i');
        $qb->addSelect('i.id AS commentImg');
        $qb->leftJoin('c.document', 'doc');
        $qb->addSelect('doc.id AS commentDoc');
        $qb->leftJoin('assoc.image', 'asimg');
        $qb->addSelect('asimg.id AS associationImg');
        // merchant
        $qb->leftJoin('c.merchant', 'm');
        $qb->addSelect('m.id AS merchantId, m.name AS merchantName');
        $qb->leftJoin('m.image', 'mimg');
        $qb->addSelect('mimg.id AS merchantImg');
        // user
        $qb->leftJoin('c.user', 'u');
        $qb->addSelect('u.id AS userId, u.firstname, u.lastname');
        $qb->leftJoin('u.image', 'uimg');
        $qb->addSelect('uimg.id AS userImg');

        $qb->where('c.article = :article');
        $qb->andWhere('c.parent IS NULL');
        $qb->setParameter('article', $article);
        $qb->orderBy('c.createAt', 'ASC');
        $qb->setMaxResults(10)
                ->setFirstResult($page * 10);
        return $qb->getQuery()->getResult();
    }
}
