<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Push;
use Doctrine\ORM\EntityRepository;

/**
 * PushRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PushRepository extends EntityRepository
{
    public function count($cityhall = null, $dateBefore = null, $dateAfter = null, $category = null, $type = null, $eventType = null, $event = null)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('COUNT(c)');
        if ($cityhall) {
            $qb->andWhere('c.community = :cityhall')->setParameter('cityhall', $cityhall);
        }
        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }
        if ($category) {
            $qb->join('c.event', 'e')
                    ->leftJoin('e.association', 'a')
                    ->orWhere('a.category = :categoryAssociation')->setParameter('categoryAssociation', $category)
                    ->leftJoin('e.merchant', 'm')
                    ->orWhere('m.category = :categoryMerchant')->setParameter('categoryMerchant', $category);
        }
        if ($type) {
            $qb->andWhere('c.type = :type')->setParameter('type', $type);
        }
        if ($eventType) {
            $qb->join('c.event', 'event')->andWhere('event.type = :eventType')->setParameter('eventType', $eventType);
        }
        if ($event) {
            $qb->andWhere('c.event = :event')->setParameter('event', $event);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $page
     * @param $order
     * @param $cityhall
     * @param $dateBefore
     * @param $dateAfter
     * @param $category
     * @param $type
     * @param $eventType
     * @param null $event
     * @return Push[]
     */
    public function search($page, $order, $cityhall, $dateBefore, $dateAfter, $category, $type, $eventType, $event = null)
    {
        $qb = $this->createQueryBuilder('c');
        if ($cityhall) {
            $qb->andWhere('c.community = :cityhall')->setParameter('cityhall', $cityhall);
        }
        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }
        if ($category) {
            $qb->join('c.event', 'e')
                    ->leftJoin('e.association', 'a')
                    ->orWhere('a.category = :categoryAssociation')->setParameter('categoryAssociation', $category)
                    ->leftJoin('e.merchant', 'm')
                    ->orWhere('m.category = :categoryMerchant')->setParameter('categoryMerchant', $category);
        }
        if ($type) {
            $qb->andWhere('c.type = :type')->setParameter('type', $type);
        }
        if ($eventType) {
            $qb->join('c.event', 'event')->andWhere('event.type = :eventType')->setParameter('eventType', $eventType);
        }

        if ($event) {
            $qb->andWhere('c.event = :event')->setParameter('event', $event);
        }
        if (is_array($order)) {
            foreach ($order as $orderName => $orderType) {
                $qb->orderBy('c.' . $orderName, $orderType);
            }
        }
        if ($page !== false) {
            $qb->setMaxResults(25)
                    ->setFirstResult($page * 25);
        }

        return $qb->getQuery()->getResult();
    }

    public function findAllByDate($cityhall, $startAt, $endAt)
    {
        $qb = $this->createQueryBuilder('c');
        if ($cityhall) {
            $qb->andWhere('c.community = :cityhall')->setParameter('cityhall', $cityhall);
        }

        $qb->andWhere('c.sendAt BETWEEN :start AND :end')->setParameter('start', $startAt)->setParameter('end', $endAt);
        $qb->orderBy('c.sendAt', 'ASC');
        return $qb->getQuery()->getResult();
    }
}
