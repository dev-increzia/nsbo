<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Community;

/**
 * CommunityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommunityRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param null $dateBefore
     * @param null $dateAfter
     * @param null $name
     * @param null $city
     * @param null $intercommunal
     * @return mixed
     */
    public function count($dateBefore = null, $dateAfter = null, $name = null, $city = null, $intercommunal = null)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('COUNT(c)');
        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }
        if ($name) {
            $qb->andWhere('c.name LIKE :name')->setParameter('name', '%' . $name . '%');
        }
        if ($city) {
            $qb->leftJoin('c.city', 'city')->andWhere('city.name LIKE :cityName')->setParameter('cityName', '%' . $city . '%');
        }
        if ($intercommunal) {
            $qb->andWhere('c.intercommunal = :intercommunal')->setParameter('intercommunal', $intercommunal);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $page
     * @param $order
     * @param $dateBefore
     * @param $dateAfter
     * @param $name
     * @param $city
     * @param $intercommunal
     * @return array
     */
    public function search($page, $order, $dateBefore, $dateAfter, $name, $city, $intercommunal)
    {
        $qb = $this->createQueryBuilder('c');

        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }
        if ($name) {
            $qb->andWhere('c.name LIKE :name')->setParameter('name', '%' . $name . '%');
        }
        if ($city) {
            $qb->leftJoin('c.city', 'city')
                ->andWhere('city.name LIKE :cityName')->setParameter('cityName', '%' . $city . '%');
        }
        if ($intercommunal) {
            $qb->andWhere('c.intercommunal = :intercommunal')->setParameter('intercommunal', $intercommunal);
        }
        if (is_array($order)) {
            foreach ($order as $orderName => $orderType) {
                $qb->orderBy('c.' . $orderName, $orderType);
            }
        }
        $qb->setMaxResults(25)
                ->setFirstResult($page * 25);

        return $qb->getQuery()->getResult();
    }
    /**
     * @param $user
     * @return Community[]
     */
    public function getFollowedCommunities($user)
    {
        $qb = $this->createQueryBuilder('c')
            ->leftJoin('c.users', 'cu')
            ->leftJoin('cu.user', 'u')
            ->andWhere('u.id = :user')->setParameter('user', $user->getId())
            ->andWhere('cu.type = :type')->setParameter('type', 'approved')
            ->andWhere('cu.follow = :follow')->setParameter('follow', true);
        return $qb->getQuery()->getResult();
    }


    /**
     * @param $user
     * @return array
     */
    public function findUserFollowedCommunities($user)
    {
        $qb = $this->createQueryBuilder('c')
                        ->select("c.id, c.name, c.isPrivate ")
                        ->leftJoin('c.users', 'cu')
                        ->leftJoin('cu.user', 'u')
                        ->andWhere('u.id = :user')->setParameter('user', $user->getId())
                        ->andWhere('cu.type = :type')->setParameter('type', 'approved')
                        ->andWhere('cu.follow = :follow')->setParameter('follow', true);
        return $qb->getQuery()->getResult();
    }

    /**
     * @param $user
     * @return array
     */
    public function findUserCommunities($user)
    {
        $qb = $this->createQueryBuilder('c')
            ->select("c.id", "c.name", "c.isPrivate","cc.name as cityName","c.email","c.phone","cc.id AS city")
            ->leftJoin('c.users', 'cu')
            ->leftJoin('c.city', 'cc')
            ->addSelect("cu.follow As follow")
            ->leftJoin('cu.user', 'u')
            ->andWhere('u.id = :user')->setParameter('user', $user->getId())
            ->andWhere('cu.type = :type')->setParameter('type', 'approved');
        return $qb->getQuery()->getResult();
    }


    /**
     * @param $user
     * @return array
     */
    public function findAllUserPrivateCommunities($user)
    {
        $qb = $this->createQueryBuilder('c')
                        ->select("c.id, c.name")
                        ->leftJoin('c.users', 'cu')
                        ->leftJoin('cu.user', 'u')
                        ->where('u.id = :user')->setParameter('user', $user->getId())
                        ->andWhere('c.isPrivate = :isPrivate')->setParameter('isPrivate', true)
                        ->andWhere('cu.type = :type')->setParameter('type', 'approved');
        return $qb->getQuery()->getResult();
    }

    /**
     * @param $user
     * @return array
     */
    public function findAllUserPublicCommunities($user)
    {
        $qb = $this->createQueryBuilder('c')
                        ->select("c.id, c.name")
                        ->leftJoin('c.users', 'cu')
                        ->leftJoin('cu.user', 'u')
                        ->where('u.id = :user')->setParameter('user', $user->getId())
                        ->andWhere('c.isPrivate = :isPrivate')->setParameter('isPrivate', false)
                        ->andWhere('cu.type = :type')->setParameter('type', 'approved');
        return $qb->getQuery()->getResult();
    }

    /**
     * @return array
     */
    public function findAllPrivateCommunities()
    {
        $qb = $this->createQueryBuilder('c')
                        ->select("c.id, c.name")
                        ->andWhere('c.isPrivate = :isPrivate')->setParameter('isPrivate', true);
        return $qb->getQuery()->getResult();
    }

    /**
     * @return array
     */
    public function findAllPublicCommunities()
    {
        $qb = $this->createQueryBuilder('c')
                        ->select("c.id, c.name")
                        ->andWhere('c.isPrivate = :isPrivate')->setParameter('isPrivate', false);
        return $qb->getQuery()->getResult();
    }

    /**
     * @return array
     */
    public function findAllPrivateCommunitiesWebsite()
    {
        $qb = $this->createQueryBuilder('c')
            ->leftJoin('c.city','ct')
            ->leftJoin('c.image','i')
            ->select("c.id, c.name,ct.zipcode,ct.name AS cityName,DATE_DIFF(CURRENT_DATE(), c.createAt) AS days,i.filename",'c.presentationDescription AS description')
            ->andWhere('c.isPrivate = :isPrivate')->setParameter('isPrivate', true);
        return $qb->getQuery()->getResult();
    }

    /**
     * @return array
     */
    public function findAllPublicCommunitiesWebsite()
    {
        $qb = $this->createQueryBuilder('c')
            ->leftJoin('c.city','ct')
            ->leftJoin('c.image','i')
            ->select("c.id, c.name, ct.zipcode,ct.name AS cityName,DATE_DIFF(CURRENT_DATE(), c.createAt) AS days,i.filename",'c.presentationDescription AS description')
            ->andWhere('c.isPrivate = :isPrivate')->setParameter('isPrivate', false);
        return $qb->getQuery()->getResult();
    }
}
