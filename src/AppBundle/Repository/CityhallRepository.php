<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CityhallRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CityhallRepository extends EntityRepository
{
    public function count($dateBefore = null, $dateAfter = null, $name = null, $city = null, $intercommunal = null)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('COUNT(c)');
        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }
        if ($name) {
            $qb->andWhere('c.name LIKE :name')->setParameter('name', '%' . $name . '%');
        }
        if ($city) {
            $qb->leftJoin('c.city', 'city')->andWhere('city.name LIKE :cityName')->setParameter('cityName', '%' . $city . '%');
        }
        if ($intercommunal) {
            $qb->andWhere('c.intercommunal = :intercommunal')->setParameter('intercommunal', $intercommunal);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function search($page, $order, $dateBefore, $dateAfter, $name, $city, $intercommunal)
    {
        $qb = $this->createQueryBuilder('c');

        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }
        if ($name) {
            $qb->andWhere('c.name LIKE :name')->setParameter('name', '%' . $name . '%');
        }
        if ($city) {
            $qb->leftJoin('c.city', 'city')
                ->andWhere('city.name LIKE :cityName')->setParameter('cityName', '%' . $city . '%');
        }
        if ($intercommunal) {
            $qb->andWhere('c.intercommunal = :intercommunal')->setParameter('intercommunal', $intercommunal);
        }
        if (is_array($order)) {
            foreach ($order as $orderName => $orderType) {
                $qb->orderBy('c.' . $orderName, $orderType);
            }
        }
        $qb->setMaxResults(25)
                ->setFirstResult($page * 25);

        return $qb->getQuery()->getResult();
    }
}
