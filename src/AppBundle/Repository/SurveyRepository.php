<?php

namespace AppBundle\Repository;

/**
 * SurveyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SurveyRepository extends \Doctrine\ORM\EntityRepository
{

    public function count($communityId)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('COUNT(c)');
        $qb->where('c.community = :community')->setParameter('community', $communityId);
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function search($communityId, $page, $order)
    {
        $qb = $this->createQueryBuilder('c');

        $qb->where('c.community = :community')->setParameter('community', $communityId);
        if (is_array($order)) {
            foreach ($order as $orderName => $orderType) {
                $qb->orderBy('c.' . $orderName, $orderType);
            }
        }
        $qb->setMaxResults(25)
            ->setFirstResult($page * 25);

        return $qb->getQuery()->getResult();
    }

    public function getSurveysByCommunities($communities, $cities = array(), $categories = array(), $j = null)
    {

        // TODO : voir avec Dhifef pour le filtre sur villes et catégories
        // Pour le moment, nous ne retournons pas les sondages en cas de filtre, cela provoque une incohérence au niveau des résultats
        if ($cities or $categories or $j) {
            return array();
        }

        $now = new \DateTime();
        $qb = $this->createQueryBuilder('s')
            ->select('s.id, s.title, s.description, s.createAt, s.publicAt')
            ->join('s.community', 'c')
            ->join('s.createBy', 'u')
            ->addSelect("u.id   AS userId")
            ->addSelect("c.name   AS community")
            ->leftJoin('s.image', 'img')
            ->addSelect("img.id As image")
            ->leftJoin('c.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->andWhere('s.community IN (:communities)')->setParameter('communities', $communities)
            ->orderBy('s.createAt', 'DESC')
            ->groupBy("s.id");

        return $qb->getQuery()->getResult();
    }


}
