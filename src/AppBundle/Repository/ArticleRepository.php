<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Article;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;


/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    public function count($cityhall = null, $dateBefore = null, $dateAfter = null, $title = null, $type = null, $enabled = null)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('COUNT(c)');
        if ($cityhall) {
            $qb->andWhere('c.community = :cityhall')->setParameter('cityhall', $cityhall);
        }
        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }

        if ($title) {
            $qb->andWhere('c.title LIKE :title')->setParameter('title', '%' . $title . '%');
        }
        if ($type != '') {
            $qb->andWhere('c.type = :type')->setParameter('type', $type);
        } else {
            if ($type === false) {
                $qb->andWhere('c.type <> :type')->setParameter('type', 'cityhall');
            }
        }
        if ($enabled != '' && $enabled != null) {
            $qb->andWhere('c.enabled = :enabled')->setParameter('enabled', $enabled);
        }
        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $page
     * @param $order
     * @param $cityhall
     * @param $dateBefore
     * @param $dateAfter
     * @param $title
     * @param $type
     * @param $enabled
     * @param bool $association
     * @param bool $merchant
     * @param bool $user
     * @return Article[]
     */
    public function search($page, $order, $cityhall, $dateBefore, $dateAfter, $title, $type, $enabled, $association = false, $merchant = false, $user = false)
    {
        $qb = $this->createQueryBuilder('c');
        if ($cityhall) {
            $qb->andWhere('c.community = :cityhall')->setParameter('cityhall', $cityhall);
        }
        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }

        if ($title) {
            $qb->andWhere('c.title LIKE :title')->setParameter('title', '%' . $title . '%');
        }
        if ($type != '') {
            $qb->andWhere('c.type = :type')->setParameter('type', $type);
            if ($type == 'association' && $association != '') {
                $qb->andWhere('c.association = :association')->setParameter('association', $association);
            } elseif ($type == 'merchant' && $merchant != '') {
                $qb->andWhere('c.merchant = :merchant')->setParameter('merchant', $merchant);
            } elseif ($type == 'user' && $user != '') {
                $qb->andWhere('c.user = :user')->setParameter('user', $user);
            }
        } else {
            if ($type === false) {
                $qb->andWhere('c.type <> :type')->setParameter('type', 'cityhall');
            }
        }
        if ($enabled != '' && $enabled != null) {
            $qb->andWhere('c.enabled = :enabled')->setParameter('enabled', $enabled);
        }

        if (is_array($order)) {
            foreach ($order as $orderName => $orderType) {
                $qb->orderBy('c.' . $orderName, $orderType);
            }
        }
        if ($page !== false) {
            $qb->setMaxResults(6)
                ->setFirstResult($page * 6);
        }

        return $qb->getQuery()->getResult();
    }

    public function findAllByCommunity($cityhall)
    {
        $qb = $this->createQueryBuilder('u');
        if ($cityhall != '') {
            $qb->andWhere('u.community = :cityhall')->setParameter('cityhall', $cityhall);
        }
        return $qb;
    }

    /**
     * Récupérer les articles de type association de citoyen suivant ses intercommunalités.
     * @param type $user
     * @param type $enabled
     * @param type $page
     * @return type
     */
    public function getArticlesPublicAssociationsByUser($communities, $cities = array(), $categories = array(), $j = null)
    {
        $now = new \DateTime();

        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt, a.title, a.publicAt, a.private, e.startAt, e.endAt')
            ->join('a.association', 'assoc')
            ->leftJoin('a.event', 'e')
            ->leftJoin('a.image', 'img')
            ->leftJoin('e.community','comm')
            ->leftJoin('e.secondaryCommunity','commSec')
            ->leftJoin('a.community','commA')
            ->addSelect('commA.name As communityName')
            ->addSelect('comm.id As primaryCommunity')
            ->addSelect('commSec.id As secondaryCommunity')
            ->addSelect("e.id As event")
            ->addSelect("e.moderate As moderateEvent")
            ->addSelect("e.moderateSecondaryCommunity As moderateEventSecondary")
            ->addSelect('e.participantsNbre AS participantsNbre')
            ->addSelect("img.id As image")
            ->addSelect("assoc.id   AS associationId")
            ->addSelect("assoc.name   AS associationName")
            ->leftJoin('assoc.image', 'associmg')
            ->addSelect('associmg.id AS associationImage')
            ->leftJoin('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->andWhere('a.community IN (:communities)')
            ->orWhere('e.community IN (:communities) AND e.moderate != :refuse')
            ->orWhere('e.secondaryCommunity IN (:communities) AND e.moderateSecondaryCommunity != :refuse')
            ->andWhere('a.type = :type')->setParameter('type', 'association')
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true)
            ->andWhere('a.private = :private')->setParameter('private', false)

            ->setParameter('communities', $communities)
            ->setParameter('refuse', 'refuse')
            ->andWhere('a.publicAt <= :dateNow')->setParameter('dateNow', $now)
            ->orderBy('a.createAt', 'DESC')
        ;

        if ($cities) {
            $qb->andWhere('a.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->innerJoin('a.categories', 'c');
            $qb->andWhere('c.id IN (:categories)')->setParameter('categories', $categories);
        }

        $qb = $this->filterByJ($qb, $now, $j);

        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles de type association de citoyen suivant ses intercommunalités.
     * @param type $user
     * @param type $enabled
     * @param type $page
     * @return type
     */
    public function getArticlesPrivateAssociationsByUser($associations, $cities = array(), $categories = array(), $j = null)
    {
        $now = new \DateTime();
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt, a.title, a.publicAt, a.private, e.startAt, e.endAt')
            ->join('a.association', 'assoc')
            ->leftJoin('a.event', 'e')
            ->leftJoin('a.image', 'img')
            ->leftJoin('e.community','comm')
            ->leftJoin('e.secondaryCommunity','commSec')
            ->leftJoin('a.community','commA')

            ->addSelect('comm.id As primaryCommunity')
            ->addSelect('commSec.id As secondaryCommunity')
            ->addSelect("e.id As event")
            ->addSelect("e.moderate As moderateEvent")
            ->addSelect("e.moderateSecondaryCommunity As moderateEventSecondary")
            ->addSelect('e.participantsNbre AS participantsNbre')
            ->addSelect("img.id As image")
            ->addSelect("assoc.id   AS associationId")
            ->addSelect("assoc.name   AS associationName")
            ->leftJoin('assoc.image', 'associmg')
            ->addSelect('associmg.id AS associationImage')
            ->leftJoin('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->leftJoin('a.community', 'com')
            ->addSelect("com.name   AS communityName")

            ->andWhere('a.type = :type')->setParameter('type', 'association')
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true)
            ->andWhere('a.private = :private')->setParameter('private', true)
            ->andWhere('a.association IN (:associations)')->setParameter('associations', $associations)
            ->andWhere('a.publicAt <= :dateNow')->setParameter('dateNow', $now)
            ->orderBy('a.createAt', 'DESC')
        ;

        if ($cities) {
            $qb->andWhere('a.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->innerJoin('a.categories', 'c');
            $qb->andWhere('c.id IN (:categories)')->setParameter('categories', $categories);
        }

        $qb = $this->filterByJ($qb, $now, $j);

        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles de type association de citoyen suivant ses intercommunalités.
     * @param type $user
     * @param type $enabled
     * @param type $page
     * @return type
     */
    public function getArticlesPublicMerchantsByUser($communities, $cities = array(), $categories = array())
    {
        $now = new \DateTime();

        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt, a.title, a.publicAt, a.private')
            ->join('a.merchant', 'merchant')
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->addSelect("merchant.id   AS merchantId")
            ->addSelect("merchant.name   AS merchantName")
            ->leftJoin('merchant.image', 'merchantimg')
            ->addSelect('merchantimg.id AS merchantImage')
            ->leftJoin('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->andWhere('a.type = :type')->setParameter('type', 'merchant')
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true)
            ->andWhere('a.private = :private')->setParameter('private', false)
            ->andWhere('a.community IN (:communities)')->setParameter('communities', $communities)
            ->andWhere('a.publicAt <= :dateNow')->setParameter('dateNow', $now)
            ->orderBy('a.createAt', 'DESC')
        ;

        if ($cities) {
            $qb->andWhere('a.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->innerJoin('a.categories', 'c');
            $qb->andWhere('c.id IN (:categories)')->setParameter('categories', $categories);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles de type association de citoyen suivant ses intercommunalités.
     * @param type $user
     * @param type $enabled
     * @param type $page
     * @return type
     */
    public function getArticlesPrivateMerchantsByUser($merchants, $cities = array(), $categories = array())
    {
        $now = new \DateTime();
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt, a.title, a.publicAt, a.private')
            ->join('a.merchant', 'merchant')
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->addSelect("merchant.id   AS merchantId")
            ->addSelect("merchant.name   AS merchantName")
            ->leftJoin('merchant.image', 'merchantimg')
            ->addSelect('merchantimg.id AS merchantImage')
            ->leftJoin('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->andWhere('a.type = :type')->setParameter('type', 'merchant')
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true)
            ->andWhere('a.private = :private')->setParameter('private', true)
            ->andWhere('a.merchant IN (:merchants)')->setParameter('merchants', $merchants)
            ->andWhere('a.publicAt <= :dateNow')->setParameter('dateNow', $now)
            ->orderBy('a.createAt', 'DESC')
        ;

        if ($cities) {
            $qb->andWhere('a.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->innerJoin('a.categories', 'c');
            $qb->andWhere('c.id IN (:categories)')->setParameter('categories', $categories);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles de type community.
     * @param type $user
     * @param type $enabled
     * @param type $page
     * @return type
     */
    public function getArticlesCommunitiesUser($communities, $cities = array(), $categories = array(), $j = null)
    {
        $now = new \DateTime();
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title, a.publicAt, a.private, e.startAt, e.endAt')
            ->join('a.community', 'c')
            ->leftJoin('a.articleHeading','h')
            ->leftJoin('a.user', 'u')
            ->leftJoin('a.event', 'e')
            ->addSelect("e.id As event")
            ->addSelect("e.moderate As moderateEvent")
            ->addSelect('h.id as heading')
            ->addSelect('e.participantsNbre AS participantsNbre')
            ->addSelect("u.id   AS userId")
            ->addSelect("c.name   AS community")
            ->addSelect("c.id   AS communityId")
            ->addSelect("c.id   AS primaryCommunity")
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->join('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->andWhere('a.type = :type')->setParameter('type', 'community')
            ->andWhere('a.community IN (:communities)')->setParameter('communities', $communities)
            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id")
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true)
            ->andWhere('a.publicAt <= :dateNow')->setParameter('dateNow', $now);
        if ($cities) {
            $qb->andWhere('a.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->innerJoin('a.categories', 'cat');
            $qb->andWhere('cat.id IN (:categories)')->setParameter('categories', $categories);
        }

        $qb = $this->filterByJ($qb, $now, $j);

        return $qb->getQuery()->getResult();
    }


    /**
     * Récupérer les articles de type citoyen de citoyen suivant ses intercommunalités.
     * @param type $user
     * @param type $enabled
     * @param type $page
     * @return Article[]
     */
    public function getArticlesCitzensByCommunities($communities, $cities = array(), $categories = array(), $j = null)
    {
        $now = new \DateTime();
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title, a.publicAt, a.private, e.startAt, e.endAt')
            ->join('a.community', 'c')
            ->join('a.user', 'u')
            ->leftJoin('a.event', 'e')
            ->addSelect("u.id   AS userId")
            ->addSelect("c.name   AS communityName")
            ->addSelect("c.id   AS community")
            ->addSelect("u.firstname   AS userFirstname")
            ->addSelect("u.lastname   AS userLastname")
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->join('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->addSelect("ac.id   AS cityId")

            ->andWhere('a.community IN (:communities)')
            ->setParameter('communities', $communities)
            ->andWhere('a.type = :type')->setParameter('type', 'user')
            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id")
            ->andWhere('a.private = :private')->setParameter('private', false)
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true)
            ->andWhere('a.publicAt <= :dateNow')->setParameter('dateNow', $now);

        if ($cities) {
            $qb->andWhere('a.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->innerJoin('a.categories', 'cat');
            $qb->andWhere('cat.id IN (:categories)')->setParameter('categories', $categories);
        }

        $qb = $this->filterByJ($qb, $now, $j);

        return $qb->getQuery()->getResult();
    }


    /**
     * Récupérer les articles Citoyens privés.
     * @param type $user
     * @param type $enabled
     * @param type $page
     * @return Article[]
     */
    public function getArticlesAssociationsMebmbersArticles($associations, $cities = array(), $categories = array(), $j = null)
    {
        $now = new \DateTime();
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title, a.publicAt, a.private, e.startAt, e.endAt')
            ->join('a.association', 'assoc')
            ->join('a.user', 'u')
            ->leftJoin('a.event', 'e')
            ->addSelect("u.id   AS userId")
            ->addSelect("u.firstname   AS userFirstname")
            ->addSelect("u.lastname   AS userLastname")
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->addSelect("assoc.id   AS associationId")
            ->addSelect("assoc.name   AS associationName")
            ->leftJoin('assoc.image', 'associmg')
            ->addSelect('associmg.id AS associationImage')
            ->leftJoin('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->leftJoin('a.community', 'com')
            ->addSelect("com.name   AS communityName")
            ->andWhere('a.type = :type')->setParameter('type', 'user')
            ->andWhere('a.association IN (:associations)')->setParameter('associations', $associations)
            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id")
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true)
            ->andWhere('a.publicAt <= :dateNow')->setParameter('dateNow', $now);

        if ($cities) {
            $qb->andWhere('a.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->innerJoin('a.categories', 'c');
            $qb->andWhere('c.id IN (:categories)')->setParameter('categories', $categories);
        }

        $qb = $this->filterByJ($qb, $now, $j);

        return $qb->getQuery()->getResult();
    }


    /**
     * Récupérer les articles Citoyens privés.
     * @param type $user
     * @param type $enabled
     * @param type $page
     * @return Article[]
     */
    public function getArticlesMerchantsMebmbersArticles($merchants, $cities = array(), $categories = array(), $j = null)
    {
        $now = new \DateTime();
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title, a.publicAt, a.private, e.startAt, e.endAt')
            ->join('a.merchant', 'merchant')
            ->join('a.user', 'u')
            ->leftJoin('a.event', 'e')
            ->addSelect("u.id   AS userId")
            ->addSelect("u.firstname   AS userFirstname")
            ->addSelect("u.lastname   AS userLastname")
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->addSelect("merchant.id   AS merchantId")
            ->addSelect("merchant.name   AS merchantName")
            ->leftJoin('merchant.image', 'merchantimg')
            ->addSelect('merchantimg.id AS merchantImage')
            ->leftJoin('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->leftJoin('a.community', 'com')
            ->addSelect("com.name   AS communityName")
            ->andWhere('a.type = :type')->setParameter('type', 'user')
            ->andWhere('a.merchant IN (:merchants)')->setParameter('merchants', $merchants)
            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id")
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true)
            ->andWhere('a.publicAt <= :dateNow')->setParameter('dateNow', $now);

        if ($cities) {
            $qb->andWhere('a.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->innerJoin('a.categories', 'c');
            $qb->andWhere('c.id IN (:categories)')->setParameter('categories', $categories);
        }

        $qb = $this->filterByJ($qb, $now, $j);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param QueryBuilder $qb
     * @param \Datetime $now
     * @param $j
     * @return QueryBuilder
     */
    protected function filterByJ($qb, $now, $j) {
        if ($j) {
            $qb->andWhere('e.id IS NOT NULL');
            switch($j) {
                case 'J':
                    $qb->andWhere('e.startAt <= :dateStart')->setParameter('dateStart', $now)
                        ->andWhere('e.endAt > :dateEnd')->setParameter('dateEnd', $now);
                    break;

                case 'JN2':
                    $after = clone $now;
                    $after->add(new \DateInterval('P2D'));
                    $qb->andWhere('e.startAt >= :dateStart1')->setParameter('dateStart1', $now)
                        ->andWhere('e.startAt <= :dateStart2')->setParameter('dateStart2', $after);
                    break;

                case 'JB2':
                    $before = clone $now;
                    $before->sub(new \DateInterval('P2D'));
                    $qb->andWhere('e.endAt <= :dateEnd1')->setParameter('dateEnd1', $now)
                        ->andWhere('e.endAt >= :dateEnd2')->setParameter('dateEnd2', $before);
                    break;
            }
        }

        return $qb;
    }


    /**
     * Récupérer les articles associés à une association.
     * @param type $association
     * @param type $page
     * @return type
     */
    public function getArticlesByAssociation($association, $page, $limit = 6)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title, a.enabled','a.private')
            ->join('a.association', 'assoc')
            ->leftJoin('a.event', 'e')
            ->addSelect("e.id As event")
            ->addSelect("IDENTITY(a.parent) As hasParent")
            ->addSelect("size(a.duplicatedArticles) As isParent")
            ->addSelect("e.moderate As moderateEvent")
            ->addSelect("assoc.id   AS associationId")
            ->addSelect("assoc.name   AS associationName")
            ->leftJoin('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->leftJoin('a.user', 'us')
            ->addSelect("us.lastname   AS userLastname","us.firstname AS userFirstname")
            ->where('a.association = :id')
            ->andWhere('a.private = :private')->setParameter('private', false)
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->setParameter('id', $association)

            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id")
            ;


            $qb->setMaxResults($limit)
                ->setFirstResult(($page - 1) * $limit);

        return $qb->getQuery()->getResult();
    }
    /**
     * Récupérer les articles associés à une association.
     * @param type $association
     * @param type $page
     * @return type
     */
    public function getArticlesByAssociationUser($association, $page, $limit = 6,$user)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title, a.enabled','a.private')
            ->join('a.association', 'assoc')
            ->leftJoin('a.event', 'e')
            ->addSelect("e.id As event")
            ->addSelect("e.moderate As moderateEvent")
            ->addSelect("assoc.id   AS associationId")
            ->addSelect("assoc.name   AS associationName")
            ->join('a.city', 'ac')
            ->join('a.user', 'us')
            ->addSelect("ac.name   AS city")
            ->addSelect("us.lastname   AS userLastname","us.firstname AS userFirstname")
            ->where('a.association = :id')
            ->andWhere('a.user = :user')->setParameter('user', $user)
            ->andWhere('a.type LIKE :role')->setParameter('role', '%user%')
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->setParameter('id', $association)
            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id")
            ->setMaxResults($limit)
            ->setFirstResult(($page - 1) * $limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles associés à une communauté.
     * @param type $commu
     * @param type $page
     * @return type
     */
    public function getArticlesByCommuUser($commu, $page, $limit = 6,$user)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title, a.enabled','a.private')
            ->join('a.community', 'commu')
            ->leftJoin('a.articleHeading','h')
            ->leftJoin('a.event', 'e')
            ->addSelect("e.id As event")
            ->addSelect("e.moderate As moderateEvent")
            ->addSelect('h.id as heading')
            ->addSelect("commu.id   AS associationId")
            ->addSelect("commu.name   AS associationName, commu.isCommentArticleHeadingActive As addComments")
            ->join('a.city', 'ac')
            ->join('a.user', 'us')
            ->addSelect("ac.name   AS city")
            ->addSelect("us.lastname   AS userLastname","us.firstname AS userFirstname")
            ->where('a.community = :id')
            ->andWhere('a.user = :user')->setParameter('user', $user)
            ->andWhere('a.type LIKE :role')->setParameter('role', '%user%')
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->setParameter('id', $commu)
            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id")
            ->setMaxResults($limit)
            ->setFirstResult(($page - 1) * $limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles associés à une communauté.
     * @param type $commu
     * @param type $page
     * @return type
     */
    public function getArticlesByCommu($commu, $page, $limit = 6)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title, a.enabled','a.private')
            ->join('a.user', 'us')
            ->addSelect("us.lastname   AS userLastname","us.firstname AS userFirstname")
            ->join('a.community', 'commu')
            ->leftJoin('a.event', 'e')
            ->addSelect("e.id As event")
            ->leftJoin('a.articleHeading','h')
            ->addSelect('h.id as heading')
            ->addSelect("e.moderate As moderateEvent")
            ->addSelect("commu.id   AS associationId")
            ->addSelect("commu.name   AS associationName , commu.isCommentArticleHeadingActive As addComments")
            ->join('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->where('a.community = :id')
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->setParameter('id', $commu)
            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id")
        ;


            $qb->setMaxResults($limit)
                ->setFirstResult(($page - 1) * $limit);

        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles associé à un commercant.
     * @param type $merchant
     * @param type $page
     * @return type
     */
    public function getArticlesByMerchant($merchant, $page, $limit = 6)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title, a.enabled')
            ->join('a.merchant', 'mer')
            ->leftJoin('a.event', 'e')
            ->addSelect("e.id As event")
            ->addSelect("IDENTITY(a.parent) As hasParent")
            ->addSelect("size(a.duplicatedArticles) As isParent")
            ->addSelect("e.moderate As moderateEvent")
            ->addSelect("mer.id   AS merchantId")
            ->addSelect("mer.name   AS merchantName")
            ->join('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->where('a.merchant = :id')
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->setParameter('id', $merchant)
            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id")
            ->setMaxResults($limit)
            ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles de mur merchant en prenant compte des filters
     * @param type $user
     * @param type $enabled
     * @param type $city
     * @param type $category
     * @param type $page
     * @return type
     */
    public function getAllArticlesMerchantsWallByCities($city, $category)
    {
        $cities = explode(",", $city);
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title')
            ->join('a.merchant', 'mer')
            ->leftJoin('a.image', 'img')
            ->leftJoin('mer.image', 'i')
            ->addSelect("IDENTITY(a.parent) As hasParent")
            ->addSelect("size(a.duplicatedArticles) As isParent")
            ->addSelect("img.id As image")
            ->addSelect("i.id As merchantImage")
            ->addSelect("mer.id   AS merchantId")
            ->addSelect("mer.name   AS merchantName")
            ->join('a.city', 'ac')
            ->join('mer.category', 'cat')
            ->addSelect("cat.name   AS category")
            ->addSelect("ac.name   AS city")
            ->where('ac.id IN (:cities)')
            ->setParameter('cities', $cities);
        if ($category != 0) {
            $qb->andWhere('mer.category = :category')->setParameter('category', $category);
        }
        $qb->andWhere('a.type = :type')->setParameter('type', 'merchant')
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true)
            ->andWhere('a.event  IS NULL')
            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id");

        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles de mur association en prenant compte des filters
     * @param type $user
     * @param type $enabled
     * @param type $city
     * @param type $category
     * @param type $page
     * @return type
     */
    public function getAllArticlesAssociationWallByCities($city, $category)
    {
        $cities = explode(",", $city);
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title')
            ->join('a.association', 'assoc')
            ->leftJoin('a.image', 'img')
            ->leftJoin('assoc.image', 'i')
            ->addSelect("IDENTITY(a.parent) As hasParent")
            ->addSelect("size(a.duplicatedArticles) As isParent")
            ->addSelect("img.id As image")
            ->addSelect("i.id As associationImage")
            ->addSelect("assoc.id   AS associationId")
            ->addSelect("assoc.name   AS associationName")
            ->join('a.city', 'ac')
            ->join('assoc.category', 'cat')
            ->addSelect("cat.name   AS category")
            ->addSelect("ac.name   AS city")
            ->where('ac.id IN (:cities)')
            ->setParameter('cities', $cities);
        if ($category != 0) {
            $qb->andWhere('assoc.category = :category')->setParameter('category', $category);
        }
        $qb->andWhere('a.type = :type')->setParameter('type', 'association')
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true)
            ->andWhere('a.event  IS NULL')
            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id");
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les projets de la ville en prenant compte des filters
     * @param type $user
     * @param type $enabled
     * @param type $city
     * @param type $page
     * @return type
     */
    public function getArticlesCityhalWallByCities($user, $city)
    {
        if ($city == "all") {
            $cities = $user->getCitiesIds();
        } elseif ($city == "principal") {
            $cities = array($user->getCity()->getId());
        } elseif ($city == "secondary") {
            foreach ($user->getSecondaryCities() as $value) {
                $cities[] = $value->getId();
            }
        } else {
            $cities = explode(",", $city);
        }

        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title')
            ->join('a.publishing', 'p')
            ->join('a.community', 'ch')
            ->leftJoin('a.user', 'u')
            ->addSelect("IDENTITY(a.parent) As hasParent")
            ->addSelect("size(a.duplicatedArticles) As isParent")
            ->addSelect("u.id AS userId")
            ->addSelect("ch.name As cityhallName, ch.isCommentArticleHeadingActive As addComments")
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->leftJoin('ch.image', 'chimg')
            ->addSelect("chimg.id As cityhallImage")
            ->join('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->where('ac.id IN (:cities)')
            ->setParameter('cities', $cities)
            ->andWhere('a.type = :type')->setParameter('type', 'cityhall')
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true)
            ->andWhere('p.id = :publishing')->setParameter('publishing', 1)
            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id");
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles-citoyen déposés par des citoyens ayant la même ville principale
     * @param type $user
     * @param type $enabled
     * @param type $category
     * @return type
     */
    public function getArticleCitzenByCities($category, $city)
    {
        $cities = explode(",", $city);
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title')
            ->join('a.user', 'u')
            ->addSelect("u.firstname   AS userFirstname")
            ->addSelect("u.lastname   AS userLastname")
            ->addSelect("u.id   AS userId")
            ->addSelect("IDENTITY(a.parent) As hasParent")
            ->addSelect("size(a.duplicatedArticles) As isParent")
            ->leftJoin('u.image', 'i')
            ->addSelect("i.id   AS userImage")
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->join('a.city', 'ac')
            ->leftJoin("a.categories", "categ")
            ->addSelect("categ.name AS categoryName")
            ->addSelect("ac.name   AS city")
            ->addSelect("categ.id AS categoryId")
            ->addSelect("ac.id   AS cityId")
            ->where('ac.id IN (:cities)')
            ->setParameter('cities', $cities);
        if ($category != 0) {
            $qb->andWhere('categ.id = :category')->setParameter('category', $category);
        }
        $qb->andWhere('a.type = :type')->setParameter('type', 'user')
            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id");
        return $qb->getQuery()->getResult();
    }

    public function getLastCommentedArticlesByAssociation($association)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->setMaxResults(3);
        $qb->select('a.id, a.title');
        $qb->leftJoin('a.image', 'img');
        $qb->addSelect("img.id AS image");
        $qb->addSelect("img.filename AS imageName");
        $qb->groupBy('a.id');
        $qb->leftJoin('a.comments', 'com');
        $qb->addSelect('COUNT(com.id) AS nbComments');
//        $qb->groupBy('com.id');
        $qb->join('a.association', 'assoc');
        $qb->addSelect("assoc.id AS associationId, assoc.name AS associationName");
        $qb->leftJoin('assoc.image', 'associmg');
        $qb->addSelect('associmg.id AS associationImage');
        $qb->where('assoc.id = :association')->setParameter('association', $association);
        $qb->addOrderBy('com.createAt', 'DESC');


        $commented = $qb->getQuery()->getResult();

        $ids = array();
        foreach ($commented as $article) {
            $ids[] = $article['id'];
        }
        if (count($commented) < 3) {
            $qb1 = $this->createQueryBuilder('a');
            $qb1->setMaxResults(3 - count($commented));
            if ($ids) {
                $qb1->where('a.id NOT IN (:ids)')->setParameter('ids', $ids);
            }
            $qb1->andWhere('a.association = :association')->setParameter('association', $association);
            $qb1->addOrderBy('a.createAt', 'DESC');
            $qb1->distinct();

            $notCommented = $qb1->getQuery()->getResult();
            $articles = array_merge($commented, $notCommented);
            return $articles;
        } else {
            return $commented;
        }
    }

    public function getLastCommentedArticlesByMerchant($merchant)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->setMaxResults(3);
        $qb->select('a.id, a.title');
        $qb->leftJoin('a.image', 'img');
        $qb->addSelect("img.id AS image");
        $qb->addSelect("img.filename AS imageName");
        $qb->groupBy('a.id');
        $qb->leftJoin('a.comments', 'com');
        $qb->addSelect('COUNT(com.id) AS nbComments');
//        $qb->groupBy('com.id');
        $qb->join('a.merchant', 'merch');
        $qb->addSelect("merch.id AS merchantId, merch.name AS merchantName");
        $qb->leftJoin('merch.image', 'merchimg');
        $qb->addSelect('merchimg.id AS merchantImage');
        $qb->where('merch.id = :merchant')->setParameter('merchant', $merchant);
        $qb->addOrderBy('com.createAt', 'DESC');


        $commented = $qb->getQuery()->getResult();

        $ids = array();
        foreach ($commented as $article) {
            $ids[] = $article['id'];
        }
        if (count($commented) < 3) {
            $qb1 = $this->createQueryBuilder('a');
            $qb1->setMaxResults(3 - count($commented));
            if ($ids) {
                $qb1->where('a.id NOT IN (:ids)')->setParameter('ids', $ids);
            }
            $qb1->andWhere('a.merchant = :merchant')->setParameter('merchant', $merchant);
            $qb1->addOrderBy('a.createAt', 'DESC');
            $qb1->distinct();

            $notCommented = $qb1->getQuery()->getResult();
            $articles = array_merge($commented, $notCommented);
            return $articles;
        } else {
            return $qb->getQuery()->getResult();
        }
    }

    public function findArticle($id)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->select('a.id, a.title, a.description, a.type, a.createAt, a.publicAt');
        //event
        $qb->leftJoin('a.event', 'ev');
        $qb->addSelect('ev.id AS event');
        $qb->addSelect('ev.participantsNbre AS participantsNbre');

        // image
        $qb->leftJoin('a.image', 'img');
        $qb->addSelect('img.id AS image');
        // nombre commentaire
        $qb->leftJoin('a.comments', 'c');
        $qb->addSelect('COUNT(c) AS nbrComments');
        // category
        $qb->leftJoin('a.categories', 'cg');
        $qb->addSelect('cg.id AS categoryId, cg.name AS categoryName');
        // city
        $qb->leftJoin('a.city', 'cy');
        $qb->addSelect('cy.id AS cityId, cy.name AS cityName');
        // association
        $qb->leftJoin('a.association', 'assoc');
        $qb->addSelect("assoc.id AS associationId, assoc.name AS associationName");
        $qb->leftJoin('assoc.category', 'ca');
        $qb->addSelect('ca.id AS associationCategoryId, ca.name AS associationCategoryName');
        $qb->leftJoin('assoc.city', 'assoccy');
        $qb->addSelect('assoccy.id AS associationCityId, assoccy.name AS associationCityName');
        // image association
        $qb->leftJoin('assoc.image', 'associmg');
        $qb->addSelect('associmg.id AS associationImage');

        // merchant
        $qb->leftJoin('a.merchant', 'm');
        $qb->addSelect("m.id AS merchantId, m.name AS merchantName");
        $qb->leftJoin('m.category', 'cm');
        $qb->addSelect('cm.id AS merchantCategoryId, cm.name AS merchantCategoryName');
        $qb->leftJoin('m.city', 'mcy');
        $qb->addSelect('mcy.id AS merchantCityId, mcy.name AS merchantCityName');

        // image commercant
        $qb->leftJoin('m.image', 'mimg');
        $qb->addSelect('mimg.id AS merchantImage');
        // cityhall
        $qb->leftJoin('a.community', 'ch');
        $qb->addSelect("ch.id AS cityhallId, ch.name AS cityhallName");
        $qb->leftJoin('m.category', 'chm');
        $qb->addSelect('chm.id AS cityhallCategoryId, chm.name AS cityhallCategoryName');
        $qb->leftJoin('ch.city', 'cicy');
        $qb->addSelect('cicy.id AS cityhallCityId, cicy.name AS cityhallCityName');
        // image communauté
        $qb->leftJoin('ch.image', 'chimg');
        $qb->addSelect('chimg.id AS cityhallImage');

        // user
        $qb->leftJoin('a.user', 'u');
        $qb->addSelect("u.id AS userId, u.firstname, u.lastname");

        // image communauté
        $qb->leftJoin('u.image', 'uimg');
        $qb->addSelect('uimg.id AS userImage');

        $qb->where('a.id = :id');
        $qb->setParameter("id", $id);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /*     * ***************************** V1 *************************************** */

    /**
     * Récupérer les articles de type association de citoyen suivant ses intercommunalités.
     * @param type $user
     * @param type $enabled
     * @param type $page
     * @return type
     */
    public function getV1ArticlesAssociationsByUserCities($user)
    {
        $cities = $user->getCitiesIds();
        $intersts = $user->getInterests();
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.association', 'assoc');
        $qb->join('assoc.city', 'ac');
        $qb->where('ac.id IN (:cities)');
        $qb->setParameter('cities', $cities);
        $qb->andWhere('assoc.category IN (:interests)');
        $qb->setParameter('interests', $intersts);
        $qb->andWhere('a.type = :type')->setParameter('type', 'association');
        $qb->orderBy('a.createAt', 'DESC');
        $qb->andWhere('a.enabled = :enabled')->setParameter('enabled', true);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles de type commercant de citoyen suivant ses intercommunalités.
     * @param type $user
     * @param type $enabled
     * @param type $page
     * @return type
     */
    public function getV1ArticlesMerchantsByUserCities($user)
    {
        $cities = $user->getCitiesIds();
        $intersts = $user->getInterests();
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.merchant', 'mer');
        $qb->join('mer.city', 'ac');
        $qb->where('ac.id IN (:cities)');
        $qb->setParameter('cities', $cities);
        $qb->andWhere('mer.category IN (:interests)');
        $qb->setParameter('interests', $intersts);
        $qb->andWhere('a.type = :type')->setParameter('type', 'merchant');
        $qb->orderBy('a.createAt', 'DESC');
        $qb->andWhere('a.enabled = :enabled')->setParameter('enabled', true);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles de type cityhall de citoyen suivant ses intercommunalités.
     * @param type $user
     * @param type $enabled
     * @param type $page
     * @return type
     */
    public function getV1ArticlesCityhallsByUserCities($user)
    {
        $cities = $user->getCitiesIds();
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.community', 'ch');
        $qb->join('ch.city', 'ac');
        $qb->where('ac.id IN (:cities)');
        $qb->setParameter('cities', $cities);
        $qb->andWhere('a.type = :type')->setParameter('type', 'cityhall');
        $qb->orderBy('a.createAt', 'DESC');
        $qb->andWhere('a.enabled = :enabled')->setParameter('enabled', true);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles de type citoyen de citoyen suivant ses intercommunalités.
     * @param type $user
     * @param type $enabled
     * @param type $page
     * @return type
     */
    public function getV1ArticlesCitzensByUserCities($user)
    {
        $cities = $user->getCitiesIds();
        $intersts = $user->getInterests();
        $qb = $this->createQueryBuilder('a')
            ->join('a.city', 'ac')
            ->where('ac.id IN (:cities)')
            ->setParameter('cities', $cities)
            ->leftJoin('a.categories', "cat")
            ->andWhere('cat.id IN (:interests)')
            ->setParameter('interests', $intersts)
            ->andWhere('a.type = :type')->setParameter('type', 'user')
            ->orderBy('a.createAt', 'DESC')
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles associés à une association.
     * @param type $association
     * @param type $page
     * @return type
     */
    public function getV1ArticlesByAssociation($association, $page, $limit = 6)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.association = :id');
        $qb->setParameter('id', $association);
        $qb->orderBy('a.createAt', 'DESC');
        $qb->setMaxResults($limit)
            ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles associé à un commercant.
     * @param type $merchant
     * @param type $page
     * @return type
     */
    public function getV1ArticlesByMerchant($merchant, $page, $limit = 6)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.merchant = :id');
        $qb->setParameter('id', $merchant);
        $qb->orderBy('a.createAt', 'DESC');
        $qb->setMaxResults($limit)
            ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles de mur merchant en prenant compte des filters
     * @param type $user
     * @param type $enabled
     * @param type $city
     * @param type $category
     * @param type $page
     * @return type
     */
    public function getV1AllArticlesMerchantsWallByCities($city, $category)
    {
        $cities = explode(",", $city);
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.merchant', 'mer');
        $qb->join('mer.city', 'ac');
        $qb->where('ac.id IN (:cities)');
        $qb->setParameter('cities', $cities);
        if ($category != 0) {
            ;
            $qb->andWhere('mer.category = :category')->setParameter('category', $category);
        }
        $qb->andWhere('a.type = :type')->setParameter('type', 'merchant');
        $qb->orderBy('a.createAt', 'DESC');
        $qb->andWhere('a.enabled = :enabled')->setParameter('enabled', true);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles de mur association en prenant compte des filters
     * @param type $user
     * @param type $enabled
     * @param type $city
     * @param type $category
     * @param type $page
     * @return type
     */
    public function getV1AllArticlesAssociationWallByCities($city, $category)
    {
        $cities = explode(",", $city);
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.association', 'assoc');
        $qb->join('assoc.city', 'ac');
        $qb->where('ac.id IN (:cities)');
        $qb->setParameter('cities', $cities);
        if ($category != 0) {
            $qb->andWhere('assoc.category = :category')->setParameter('category', $category);
        }
        $qb->andWhere('a.type = :type')->setParameter('type', 'association');
        $qb->andWhere('a.enabled = :enabled')->setParameter('enabled', true);
        $qb->orderBy('a.createAt', 'DESC');
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les projets de la ville en prenant compte des filters
     * @param type $user
     * @param type $enabled
     * @param type $city
     * @param type $page
     * @return type
     */
    public function getV1ArticlesCityhalWallByCities($user, $enabled, $city)
    {
        $cities = array();
        switch ($city) {
            case 'all':
                $cities = $user->getCitiesIds();
                break;
            case 'principal':
                $cities = array($user->getCity()->getId());
                break;
            case 'secondary':
                $cities = array();
                foreach ($user->getSecondaryCities() as $value) {
                    $cities[] = $value->getId();
                }
                break;
        }
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.community', 'ch');
        $qb->join('ch.city', 'ac');
        $qb->where('ac.id IN (:cities)');
        $qb->setParameter('cities', $cities);
        $qb->andWhere('a.type = :type')->setParameter('type', 'cityhall');
        $qb->andWhere('a.enabled = :enabled')->setParameter('enabled', true);
        $qb->orderBy('a.createAt', 'DESC');
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles-citoyen déposés par des citoyens ayant la même ville principale
     * @param type $user
     * @param type $enabled
     * @param type $category
     * @return type
     */
    public function getV1ArticleCitzenByCities($category, $city)
    {
        $cities = explode(",", $city);
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.city', 'ac');
        $qb->where('ac.id IN (:cities)');
        $qb->setParameter('cities', $cities);
        if ($category != 0) {
            $qb->andWhere('a.category = :category')->setParameter('category', $category);
        }
        $qb->andWhere('a.type = :type')->setParameter('type', 'user');
        $qb->orderBy('a.createAt', 'DESC');

        return $qb->getQuery()->getResult();
    }


    public function getV1LastCommentedArticlesByMerchant($merchant)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->setMaxResults(3);
        $qb->join('a.comments', 'com');
        $qb->where('a.merchant = :merchant')->setParameter('merchant', $merchant);
        $qb->addOrderBy('com.createAt', 'DESC');
        $qb->distinct();

        $commented = $qb->getQuery()->getResult();
        $ids = array();
        foreach ($commented as $article) {
            $ids[] = $article->getId();
        }
        if (count($commented) < 3) {
            $qb1 = $this->createQueryBuilder('a');
            $qb1->setMaxResults(3 - count($commented));
            if ($ids) {
                $qb1->where('a.id NOT IN (:ids)')->setParameter('ids', $ids);
            }
            $qb1->andWhere('a.merchant = :merchant')->setParameter('merchant', $merchant);
            $qb1->addOrderBy('a.createAt', 'DESC');
            $qb1->distinct();

            $notCommented = $qb1->getQuery()->getResult();
            $articles = array_merge($commented, $notCommented);
            return $articles;
        } else {
            return $qb->getQuery()->getResult();
        }
    }

    public function findLikes($id)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->select('a.id');
        $qb->join('a.likes', 'l');
        $qb->join('l.user', 'u');
        $qb->addSelect('u.id AS userId, u.firstname, u.lastname');
        $qb->leftJoin('u.image', 'img');
        $qb->addSelect('img.id AS image');
        $qb->where('a.id = :id');
        $qb->setParameter("id", $id);

        return $qb->getQuery()->getResult();
    }

    /*     * * Accueil citoyen V2 ******** */

    /**
     * Récupérer les articles de type association de citoyen suivant ses intercommunalités.
     * @param type $user
     * @param type $enabled
     * @param type $page
     * @return type
     */
    public function getV2ArticlesAssociationsByUserCities($user)
    {
        $cities = $user->getCitiesIds();
        $intersts = $user->getInterests();
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title')
            ->join('a.association', 'assoc')
            ->leftJoin('a.event', 'e')
            ->leftJoin('a.image', 'img')
            ->addSelect("e.id As event")
            ->addSelect("img.id As image")
            ->addSelect("assoc.id   AS associationId")
            ->addSelect("assoc.name   AS associationName")
            ->join('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->where('ac.id IN (:cities)')
            ->setParameter('cities', $cities)
            ->andWhere('assoc.category IN (:interests)')
            ->setParameter('interests', $intersts)
            ->andWhere('a.type = :type')->setParameter('type', 'association')
            ->orderBy('a.createAt', 'DESC')
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles de type commercant de citoyen suivant ses intercommunalités.
     * @param type $user
     * @param type $enabled
     * @param type $page
     * @return type
     */
    public function getV2ArticlesMerchantsByUserCities($user)
    {
        $cities = $user->getCitiesIds();
        $intersts = $user->getInterests();
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title')
            ->join('a.merchant', 'mer')
            ->leftJoin('a.event', 'e')
            ->leftJoin('a.image', 'img')
            ->addSelect("e.id As event")
            ->addSelect("img.id As image")
            ->addSelect("mer.id   AS merchantId")
            ->addSelect("mer.name   AS merchantName")
            ->join('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->where('ac.id IN (:cities)')
            ->setParameter('cities', $cities)
            ->andWhere('mer.category IN (:interests)')
            ->setParameter('interests', $intersts)
            ->andWhere('a.type = :type')->setParameter('type', 'merchant')
            ->orderBy('a.createAt', 'DESC')
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true);

        return $qb->getQuery()->getResult();
    }

    public function appSearchByTitleCreator($user, $key, $theme, $city)
    {
        if ($city == "all") {
            $cities = $user->getCommunities();
        } else {
            $cities = $city;
        }

        $comm = [];

        foreach ($cities as $city) {
            if($city->getType() == 'approved'){
                $comm[]=$city->getCommunity();
            }

        }

        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title')
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->leftJoin('a.community','comm')
            ->addSelect('comm.isCommentArticleHeadingActive As addComments');
        if ($key) {
            $qb->andWhere("a.title LIKE :title")
                ->leftJoin("a.association", "association")
                ->orWhere("a.type = 'association' AND association.name LIKE :title")
                ->leftJoin("a.merchant", "merchant")
                ->orWhere("a.type = 'merchant' AND merchant.name LIKE :title")
                ->leftJoin("a.community", "cityhall")
                ->orWhere("a.type = 'cityhall' AND cityhall.name LIKE :title")
                ->leftJoin("a.user", "user")
                ->orWhere("a.type = 'user' AND  user.firstname LIKE :title")
                ->orWhere("a.type = 'user' AND user.lastname LIKE :title")
                ->setParameter("title", '%' . $key . '%');
        }

        if ($theme) {
            $qb->join("a.categories", "cat")
                ->orWhere("cat.id = :category")
                ->setParameter("category", $theme);
        }
        $qb
            ->andWhere("a.community IN (:cities)")
            ->setParameter("cities", $comm)
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true)
            ->orderBy('a.createAt', 'DESC');
        return $qb->getQuery()->getResult();
    }

    public function appSearchByDescription($user, $key, $theme, $city)
    {
        if ($city == "all") {
            $cities = $user->getCommunities();
        } else {
            $cities = $city;
        }

        $comm = [];

        foreach ($cities as $city) {
            if($city->getType() == 'approved'){
                $comm[]=$city->getCommunity();
            }

        }

        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title')
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->leftJoin('a.community','comm')
            ->addSelect('comm.isCommentArticleHeadingActive As addComments');

        if ($key) {
            $qb->andWhere("a.description LIKE :description")
                ->setParameter("description", '%' . $key . '%');
        }

        if ($theme) {
            $qb->join("a.categories", "cat")
                ->orWhere("cat.id = :category")
                ->setParameter("category", $theme);
        }
        $qb
            ->andWhere("a.community IN (:cities)")
            ->setParameter("cities", $comm)
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true)
            ->orderBy('a.createAt', 'DESC');
        return $qb->getQuery()->getResult();
    }

    public function getArticlesByIdHeading($user, $id_heading)
    {


        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.type, a.description, a.createAt,a.title')

            ->join('a.community', 'ch')
            ->leftJoin('a.user', 'u')
            ->addSelect("u.id AS userId")
            ->addSelect("ch.name As cityhallName, ch.isCommentArticleHeadingActive As addComments")
            ->addSelect("IDENTITY(a.parent) As hasParent")
            ->addSelect("size(a.duplicatedArticles) As isParent")
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->leftJoin('ch.image', 'chimg')
            ->addSelect("chimg.id As cityhallImage")
            ->join('a.city', 'ac')
            ->addSelect("ac.name   AS city")


            //->andWhere('a.type = :type')->setParameter('type', 'cityhall')
            ->andWhere('a.enabled = :enabled')->setParameter('enabled', true)
            ->andWhere('a.articleHeading = :articleHeading')->setParameter('articleHeading', $id_heading)
            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id");
        return $qb->getQuery()->getResult();
    }

    public function removeNextArticles($article)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->delete('\AppBundle\Entity\Article', 'a')
            ->where('a.publicAt >= :date')
            ->andWhere('a.parent = :parent')
            ->setParameter('date', $article->getPublicAt())
            ->setParameter('parent', $article->getParent());

        return $qb->getQuery()->getResult();
    }

    public function getNextArticles($article)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->select('a')
            ->where('a.publicAt >= :date')
            ->andWhere('a.parent = :parent')
            ->setParameter('date', $article->getPublicAt())
            ->setParameter('parent', $article->getParent());

        return $qb->getQuery()->getResult();
    }
}
