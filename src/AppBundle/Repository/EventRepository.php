<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Event;
use Doctrine\ORM\EntityRepository;
use UserBundle\Entity\User;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
    public function count($cityhall = null, $type = null, $title = null, $enabled = null, $moderate = null, $wait = null, $dateBefore = null, $dateAfter = null, $startAt = null, $endAt = null)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('COUNT(c)');
        if ($cityhall) {
            $qb->andWhere('c.community = :cityhall')->setParameter('cityhall', $cityhall);
        }
        if ($title) {
            $qb->andWhere('c.title LIKE :title')->setParameter('title', '%' . $title . '%');
        }
        if ($type) {
            $qb->andWhere('c.type = :type')->setParameter('type', $type);
        }
        if ($enabled != '' && $enabled != null) {
            $qb->andWhere('c.enabled = :enabled')->setParameter('enabled', $enabled);
        }
        if ($wait != '' && $wait == 'true') {
            $qb->andWhere('c.moderate = :moderate')->setParameter('moderate', 'wait');
        } else {
            if ($moderate != '' && $moderate != null) {
                $qb->andWhere('c.moderate = :moderate')->setParameter('moderate', $moderate);
            }
        }
        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }

        if ($startAt) {
            $startAt = substr($startAt, 6, 4) . '-' . substr($startAt, 3, 2) . '-' . substr($startAt, 0, 2) . ' ' . substr($startAt, 11, 8);
            $qb->andwhere('c.startAt >= :startAt')->setParameter('startAt', $startAt);
        }
        if ($endAt) {
            $endAt = substr($endAt, 6, 4) . '-' . substr($endAt, 3, 2) . '-' . substr($endAt, 0, 2) . ' ' . substr($endAt, 11, 8);
            $qb->andWhere('c.endAt <= :endAt')->setParameter('endAt', $endAt);
        }
        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $page
     * @param $order
     * @param $cityhall
     * @param $type
     * @param $title
     * @param $enabled
     * @param $moderate
     * @param $wait
     * @param $dateBefore
     * @param $dateAfter
     * @param $startAt
     * @param $endAt
     * @param int $limit
     * @param bool $association
     * @param bool $merchant
     * @param null $volunteer
     * @param null $category
     * @return Event[]
     */
    public function search($page, $order, $cityhall, $type, $title, $enabled, $moderate, $wait, $dateBefore, $dateAfter, $startAt, $endAt, $limit = 6, $association = false, $merchant = false, $volunteer = null, $category = null)
    {
        $qb = $this->createQueryBuilder('c');
        if ($cityhall) {
            $qb->where('c.community = :cityhall')->setParameter('cityhall', $cityhall);
            $qb->orWhere('c.secondaryCommunity = :cityhall2')->setParameter('cityhall2', $cityhall);
        }
        if ($title) {
            $qb->andWhere('c.title LIKE :title')->setParameter('title', '%' . $title . '%');
        }
        if ($type) {
            $qb->andWhere('c.type = :type')->setParameter('type', $type);
            if ($type == 'association' && $association != '') {
                $qb->andWhere('c.association = :association')->setParameter('association', $association);
            } elseif ($type == 'merchant' && $merchant != '') {
                $qb->andWhere('c.merchant = :merchant')->setParameter('merchant', $merchant);
            }
        }
        if ($volunteer != '' && $volunteer != null) {
            $needVolunteer = $volunteer == 'on' ? true : false;
            $qb->andWhere('c.needVolunteer = :needVolunteer')->setParameter('needVolunteer', $needVolunteer);
        }
        if ($enabled != '' && $enabled != null) {
            $qb->andWhere('c.enabled = :enabled')->setParameter('enabled', $enabled);
        }
        if ($wait != '' && $wait == 'true') {
            $qb->andWhere('c.moderate = :moderate')->setParameter('moderate', 'wait');
        } else {
            if ($moderate != '' && $moderate != null) {
                $qb->andWhere('c.moderate = :moderate')->setParameter('moderate', $moderate);
            }
        }
        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }

        if ($startAt) {
            $startAt = substr($startAt, 6, 4) . '-' . substr($startAt, 3, 2) . '-' . substr($startAt, 0, 2) . ' ' . substr($startAt, 11, 8);
            $qb->andwhere('c.startAt >= :startAt')->setParameter('startAt', $startAt);
        }
        if ($endAt) {
            $endAt = substr($endAt, 6, 4) . '-' . substr($endAt, 3, 2) . '-' . substr($endAt, 0, 2) . ' ' . substr($endAt, 11, 8);
            $qb->andWhere('c.endAt <= :endAt')->setParameter('endAt', $endAt);
        }

        if ($category) {
            $qb->leftJoin('c.association', 'a')
                    ->orWhere('a.category = :categoryAssociation')->setParameter('categoryAssociation', $category)
                    ->leftJoin('c.merchant', 'm')
                    ->orWhere('m.category = :categoryMerchant')->setParameter('categoryMerchant', $category);
        }

        if (is_array($order)) {
            foreach ($order as $orderName => $orderType) {
                $qb->orderBy('c.' . $orderName, $orderType);
            }
        }
        if ($page !== false) {
            $qb->setMaxResults($limit)
                    ->setFirstResult($page * $limit);
        }

        return $qb->getQuery()->getResult();
    }


    public function findAllByCommunity($cityhall)
    {
        $qb = $this->createQueryBuilder('u');
        if ($cityhall != '') {
            $qb->andWhere('u.community = :community')->setParameter('community', $cityhall);
        }
        return $qb;
    }

    public function getEventById($type, $id, $searchType, $page, $numberMessagePerPage)
    {
        $qb = $this->createQueryBuilder('ev');
        if ($type == "merchant") {
            $qb->andWhere('ev.merchant = :merchantid')->setParameter('merchantid', $id);
        } else {
            $qb->andWhere('ev.association = :associationid')->setParameter('associationid', $id);
        }
        if ($searchType == "valid") {
            $qb->andWhere('ev.enabled = :valid')->setParameter('valid', 1);
        }
        $qb->setMaxResults($numberMessagePerPage)
                ->setFirstResult($page * $numberMessagePerPage);
        return $qb->getQuery()->getResult();
    }

    public function getEventsByIntercom($user, $enabled, $moderate, $page)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.city', 'c');
        $qb->leftJoin('c.users', 'u');
        $qb->where('u.id = :id');
        $qb->setParameter('id', $user->getId());
        $qb->andWhere('a.enabled = :enabled')->setParameter('enabled', $enabled);
        $qb->andWhere('a.moderate = :moderate')->setParameter('moderate', $moderate);
        $qb->orderBy('a.startAt', 'DESC');
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer liste des evenements pour une association
     * @param type $association
     * @param type $page
     * @return type
     */
    public function getEventsByAssociation($association, $page, $limit = 6)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.type, e.description, e.enabled, e.moderate, e.price');
        $qb->leftJoin('e.image', 'img');
        $qb->addSelect('img.id AS image');
        $qb->leftJoin('e.city', 'cy');
        $qb->addSelect('cy.name AS city');
        $qb->where('e.association = :id');
        $qb->setParameter('id', $association);
        $qb->orderBy('e.startAt', 'DESC');
        $qb->setMaxResults($limit)
                ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer liste des evenements pour un association avec filter
     * @param type $merchant
     * @param type $page
     * @return type
     */
    public function getEventsByAssociationFilter($association, $personalized, $page, $limit = 6)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.type, e.description, e.enabled, e.moderate, e.price');
        $qb->leftJoin('e.image', 'img');
        $qb->addSelect('img.id AS image');
        $qb->where('e.association = :id');
        $qb->setParameter('id', $association);
        $qb->andWhere('e.personalized = :personalized');
        $qb->setParameter('personalized', $personalized);
        $qb->orderBy('e.startAt', 'DESC');
        $qb->setMaxResults($limit)
                ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer liste des evenements pour un commercant
     * @param type $merchant
     * @param type $page
     * @return type
     */
    public function getEventsByMerchant($merchant, $page, $limit = 6)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.type, e.description, e.enabled, e.moderate, e.price');
        $qb->leftJoin('e.image', 'img');
        $qb->addSelect('img.id AS image');
        $qb->leftJoin('e.city', 'cy');
        $qb->addSelect('cy.name AS city');
        $qb->where('e.merchant = :id');
        $qb->setParameter('id', $merchant);
        $qb->orderBy('e.startAt', 'DESC');
        $qb->setMaxResults($limit)
                ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer liste des evenements pour un commercant avec filter
     * @param type $merchant
     * @param type $page
     * @return type
     */
    public function getEventsByMerchantFilter($merchant, $personalized, $page, $limit = 6)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.type, e.description, e.enabled, e.moderate, e.price');
        $qb->leftJoin('e.image', 'img');
        $qb->addSelect('img.id AS image');
        $qb->where('e.merchant = :id');
        $qb->setParameter('id', $merchant);
        $qb->andWhere('e.personalized = :personalized');
        $qb->setParameter('personalized', $personalized);
        $qb->orderBy('e.startAt', 'DESC');
        $qb->setMaxResults($limit)
                ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les événements en prenant compte des filters pour Associations
     * @param type $user
     * @param type $enabled
     * @param type $city
     * @param type $datetime
     * @return type
     */
    public function getAllEventAssociationsByIntercom($user, $enabled, $city, $datetime, $userinterests)
    {
        $cities = explode(",", $city);
        $now = new \DateTime();
        $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
        $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");

        $qb = $this->createQueryBuilder('a');
        $qb->join('a.association', 'assoc');
        $qb->join('assoc.city', 'ac');
        $qb->where('ac.id IN (:cities)');
        $qb->andWhere('assoc.category IN (:userinterestIds)');
        $qb->andWhere('a.enabled = :enabled');
        $qb->andWhere('a.moderate = :moderate');
        $qb->andWhere('a.type = :type');
        switch ($datetime) {
            case 'today':
                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case 'weekend':
                $from = new \DateTime('next Saturday');
                $to = new \DateTime('next Sunday');
                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d 23:59:59') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '1month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +1 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +1 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '2month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +2 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +2 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '3month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +3 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +3 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '4month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +4 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +4 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '5month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +5 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +5 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '6month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +6 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +6 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '7month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +7 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +7 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '8month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +8 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +8 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '9month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +9 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +9 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '10month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +10 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +10 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '11month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +11 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +11 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '12month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +12 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +12 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            default:
                //echo "param1";
                $qb->andwhere('a.startAt >= :startAt');
                $qb->setParameters(array('startAt' => $from, 'enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
        }

        $qb->orderBy('a.startAt', 'DESC');

        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les événements en prenant compte des filters pour Merchants
     * @param type $user
     * @param type $enabled
     * @param type $city
     * @param type $datetime
     * @return type
     */
    public function getAllEventByMerchantsIntercom($user, $enabled, $city, $datetime, $userinterests)
    {
        $cities = explode(",", $city);
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.merchant', 'mer');
        $qb->join('mer.city', 'mc');
        $qb->where('mc.id IN (:cities)');
        $qb->andWhere('mer.category IN (:userinterestIds)');
        $qb->andWhere('a.enabled = :enabled');
        $qb->andWhere('a.moderate = :moderate');
        $qb->andWhere('a.type = :type');

        $now = new \DateTime();
        $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
        $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
        switch ($datetime) {
            case 'today':
                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case 'weekend':
                $from = new \DateTime('next Saturday');
                $to = new \DateTime('next Sunday');
                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '1month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +1 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +1 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '2month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +2 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +2 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '3month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +3 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +3 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '4month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +4 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +4 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '5month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +5 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +5 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '6month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +6 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +6 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '7month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +7 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +7 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '8month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +8 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +8 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '9month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +9 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +9 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '10month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +10 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +10 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '11month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +11 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +11 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '12month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +12 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +12 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            default:
                $qb->andwhere('a.startAt >= :startAt');
                $qb->setParameters(array('startAt' => $from, 'enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
        }
        $qb->orderBy('a.startAt', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function getEventsAssociationsByInterest($user, $enabled, $userinterestIds)
    {
        $now = new \DateTime();
        $startAt = new \DateTime($now->format("Y-m-d") . " 00:00:00");
        $interestsIds = [];
        $interests = $user->getInterests();
        foreach ($interests as $interest) {
            $interestsIds[] = $interest->getId();
        }

        $subQuery = $this->createQueryBuilder("e")
                ->select("e.id")
                ->leftJoin("e.categories", "cat")
                ->andWhere('cat.id IN (:interestsIds)')
                ->setParameter("interestsIds", $interestsIds)
                ->getQuery()
                ->getArrayResult();
        $qb = $this->createQueryBuilder('a');
        $qb->select('a.id, a.title, a.startAt, a.type');
        $qb->leftJoin('a.image', 'img');
        $qb->addSelect('img.id AS image');
        $qb->join('a.association', 'assoc');
        $qb->addSelect("assoc.id AS creatorId, assoc.name AS creatorName");
        $qb->join('a.city', 'ac');
        $qb->addSelect("ac.id as cityId, ac.name AS cityName");
        $qb->where('ac.id IN (:cities)');
        // $qb->leftJoin("a.categories", "cat");
        $qb->andWhere('a.id NOT IN (:subquery)');
        $qb->andWhere('a.enabled = :enabled');
        $qb->andWhere('a.moderate = :moderate');
        $qb->andWhere('a.type = :type');
        $qb->andwhere('a.startAt >= :startAt');
        $qb->setParameters(array('startAt' => $startAt, 'enabled' => $enabled, 'moderate' => "accepted", 'subquery' => $subQuery, 'type' => 'association', 'cities' => $user->getCitiesIds()));
        $qb->orderBy('a.startAt', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function getEventsMerchantsByInterest($user, $enabled, $userinterestIds, $allEvent = false)
    {
        $now = new \DateTime();
        $startAt = new \DateTime($now->format("Y-m-d") . " 00:00:00");

        $interestsIds = [];
        $interests = $user->getInterests();
        foreach ($interests as $interest) {
            $interestsIds[] = $interest->getId();
        }

        $subQuery = $this->createQueryBuilder("e")
                ->select("e.id")
                ->leftJoin("e.categories", "cat")
                ->andWhere('cat.id IN (:interestsIds)')
                ->setParameter("interestsIds", $interestsIds)
                ->getQuery()
                ->getArrayResult();

        $qb = $this->createQueryBuilder('a');
        $qb->select('a.id, a.title, a.startAt, a.type');
        $qb->leftJoin('a.image', 'img');
        $qb->addSelect('img.id AS image');
        $qb->join('a.merchant', 'mer');
        $qb->addSelect("mer.id AS creatorId, mer.name AS creatorName");
        $qb->join('a.city', 'mc');
        $qb->addSelect("mc.id as cityId, mc.name AS cityName");
        $qb->where('mc.id IN (:cities)');
        $qb->andWhere('a.id NOT IN (:subQuery)');
        $qb->andWhere('a.enabled = :enabled');
        $qb->andWhere('a.moderate = :moderate');
        $qb->andWhere('a.type = :type');
        $qb->andwhere('a.startAt >= :startAt');
        $qb->setParameters(array('startAt' => $startAt, 'enabled' => $enabled, 'moderate' => "accepted", 'subQuery' => $subQuery, 'type' => 'merchant', 'cities' => $user->getCitiesIds()));
        $qb->orderBy('a.startAt', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function getLastCommentedEventsByAssociation($association)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->setMaxResults(3);
        $qb->select('e.id, e.title');
        $qb->leftJoin('e.image', 'img');
        $qb->addSelect("img.id AS image");
        $qb->addSelect("img.filename AS imageName");
        $qb->leftJoin('e.participants', 'p');
        $qb->addSelect('COUNT(p.id) AS nbParticipants');
        $qb->groupBy('e.id');
        $qb->leftJoin('e.comments', 'com');
        $qb->addSelect('COUNT(com.id) AS nbComments');
//        $qb->groupBy('com.id');
        $qb->join('e.association', 'assoc');
        $qb->addSelect("assoc.id AS associationId, assoc.name AS associationName");
        $qb->leftJoin('assoc.image', 'associmg');
        $qb->addSelect('associmg.id AS associationImage');
        $qb->where('assoc.id = :association')->setParameter('association', $association);
        $qb->addOrderBy('com.createAt', 'DESC');


        $commented = $qb->getQuery()->getResult();

        $ids = array();
        foreach ($commented as $article) {
            $ids[] = $article['id'];
        }
        if (count($commented) < 3) {
            $qb1 = $this->createQueryBuilder('e');
            $qb1->setMaxResults(3 - count($commented));
            if ($ids) {
                $qb1->where('e.id NOT IN (:ids)')->setParameter('ids', $ids);
            }
            $qb1->andWhere('e.association = :association')->setParameter('association', $association);
            $qb1->addOrderBy('e.createAt', 'DESC');
            $qb1->distinct();

            $notCommented = $qb1->getQuery()->getResult();
            $articles = array_merge($commented, $notCommented);
            return $articles;
        } else {
            return $commented;
        }
    }

    public function getLastCommentedEventsByMerchant($merchant)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->setMaxResults(3);
        $qb->select('e.id, e.title');
        $qb->leftJoin('e.image', 'img');
        $qb->addSelect("img.id AS image");
        $qb->addSelect("img.filename AS imageName");
        $qb->leftJoin('e.participants', 'p');
        $qb->addSelect('COUNT(p.id) AS nbParticipants');
        $qb->groupBy('e.id');
        $qb->leftJoin('e.comments', 'com');
        $qb->addSelect('COUNT(com.id) AS nbComments');
//        $qb->groupBy('com.id');
        $qb->join('e.merchant', 'merch');
        $qb->addSelect("merch.id AS merchantId, merch.name AS merchantName");
        $qb->leftJoin('merch.image', 'merchimg');
        $qb->addSelect('merchimg.id AS merchantImage');
        $qb->where('merch.id = :merchant')->setParameter('merchant', $merchant);
        $qb->addOrderBy('com.createAt', 'DESC');


        $commented = $qb->getQuery()->getResult();

        $ids = array();
        foreach ($commented as $article) {
            $ids[] = $article['id'];
        }
        if (count($commented) < 3) {
            $qb1 = $this->createQueryBuilder('e');
            $qb1->setMaxResults(3 - count($commented));
            if ($ids) {
                $qb1->where('e.id NOT IN (:ids)')->setParameter('ids', $ids);
            }
            $qb1->andWhere('e.merchant = :merchant')->setParameter('merchant', $merchant);
            $qb1->addOrderBy('e.createAt', 'DESC');
            $qb1->distinct();

            $notCommented = $qb1->getQuery()->getResult();
            $articles = array_merge($commented, $notCommented);
            return $articles;
        } else {
            return $qb->getQuery()->getResult();
        }
    }

    /**
     * @param User $user
     * @param $cities
     * @param $categories
     * @param $period
     * @param bool $allEvent
     * @return array
     */
    public function getMerchantsEventsByUserInterest($user, $cities, $categories, $period, $allEvent = false)
    {
        $now = new \DateTime();
        $interestsIds = [];

        $interests = $user->getInterests();
        foreach ($interests as $interest) {
            $interestsIds[] = $interest->getId();
        }

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.endAt, e.type')
                ->join('e.merchant', 'mer')
                ->join("e.categories", "cat")
                ->leftJoin('e.image', 'img')
                ->addSelect('img.id AS image')
                ->addSelect("mer.id AS creatorId, mer.name AS creatorName")
                ->leftJoin('mer.image', 'merimg')
                ->addSelect('merimg.id AS creatorImg')
                ->join('e.city', 'ac')
                ->addSelect("ac.id AS cityId, ac.name AS cityName")
                ->andWhere('cat.id IN (:interests)')
                ->setParameter('interests', $interestsIds)
                ->andWhere('e.enabled = :enabled')
                ->setParameter('enabled', true)
                ->andWhere('e.moderate = :moderate')
                ->setParameter('moderate', "accepted");

        if (!$allEvent) {
            $qb->andWhere('e.startAt > :now');
            $qb->setParameter('now', $now->format('Y-m-d 00:00:00'));
        } else {
            $qb->andWhere('e.endAt >= :now');
            $qb->setParameter('now', $now->format('Y-m-d 00:00:00'));
        }

        if ($cities) {
            $qb->andWhere('e.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->innerJoin('e.categories', 'cat');
            $qb->andWhere('cat.id IN (:categories)')->setParameter('categories', $categories);
        }

        $qb->orderBy('e.startAt', 'DESC')->groupBy('e.id');
        

        return $qb->getQuery()->getResult();
    }

    public function findParticipants($id)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id');
        $qb->join('e.participants', 'p');
        $qb->addSelect('p.id AS userId, p.firstname, p.lastname');
        $qb->leftJoin('p.image', 'img');
        $qb->addSelect('img.id AS image');
        $qb->where('e.id = :id');
        $qb->setParameter("id", $id);

        return $qb->getQuery()->getResult();
    }

    public function findVolonteers($id)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id');
        $qb->join('e.volunteers', 'p');
        $qb->leftJoin('p.user', 'u');
        $qb->addSelect('u.id AS userId, u.firstname, u.lastname');
        $qb->leftJoin('u.image', 'img');
        $qb->addSelect('img.id AS image');
        $qb->where('e.id = :id');
        $qb->setParameter("id", $id);

        return $qb->getQuery()->getResult();
    }

    public function findTransported($id)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id');
        $qb->join('e.carpoolings', 'c');
        $qb->join('c.carpoolingAnswers', 'ca');
        $qb->leftJoin('ca.createBy', 'u');
        $qb->addSelect('u.id AS userId, u.firstname, u.lastname');
        $qb->leftJoin('u.image', 'img');
        $qb->addSelect('img.id AS image');
        $qb->where('e.id = :id');
        $qb->setParameter("id", $id);

        return $qb->getQuery()->getResult();
    }

    public function findEvent($id)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.endAt, e.description,'
                . ' e.price, e.place, e.type, e.participantsNbre');
        // image
        $qb->leftJoin('e.image', 'img');
        $qb->addSelect('img.id AS image');
        //createBy
        $qb->leftJoin('e.createBy', 'cr');
        $qb->addSelect('cr.id AS creatorId');
        // image
        $qb->leftJoin('e.city', 'cy');
        $qb->addSelect('cy.name AS city');
        // association
        $qb->leftJoin('e.association', 'assoc');
        $qb->addSelect("assoc.id AS associationId, assoc.name AS associationName");
        $qb->leftJoin('assoc.image', 'associmg');
        $qb->addSelect('associmg.id AS associationImg');
        $qb->leftJoin('assoc.category', 'ca');
        $qb->addSelect('ca.id AS associationCategoryId, ca.name AS associationCategoryName');
        // city
        $qb->leftJoin('assoc.city', 'assoccy');
        $qb->addSelect('assoccy.id AS associationCityId, assoccy.name AS associationCityName');

        //reservation
        $qb->leftJoin('e.reservations', 'r');
        $qb->addSelect('r.id AS reservationId, r.name AS reservationName');
        // article
        $qb->leftJoin('e.article', 'a');
        $qb->addSelect("a.id AS articleId");

        $qb->where('e.id = :id');
        $qb->setParameter('id', $id);
        return $qb->getQuery()->getOneOrNullResult();
    }

    /*     * ******************** V1 **************************** */

    public function getV1EventById($type, $id, $searchType, $page, $numberMessagePerPage)
    {
        $qb = $this->createQueryBuilder('ev');
        if ($type == "merchant") {
            $qb->andWhere('ev.merchant = :merchantid')->setParameter('merchantid', $id);
        } else {
            $qb->andWhere('ev.association = :associationid')->setParameter('associationid', $id);
        }
        if ($searchType == "valid") {
            $qb->andWhere('ev.enabled = :valid')->setParameter('valid', 1);
        }
        $qb->setMaxResults($numberMessagePerPage)
                ->setFirstResult($page * $numberMessagePerPage);
        return $qb->getQuery()->getResult();
    }

    public function getV1EventsByIntercom($user, $enabled, $moderate, $page)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.city', 'c');
        $qb->leftJoin('c.users', 'u');
        $qb->where('u.id = :id');
        $qb->setParameter('id', $user->getId());
        $qb->andWhere('a.enabled = :enabled')->setParameter('enabled', $enabled);
        $qb->andWhere('a.moderate = :moderate')->setParameter('moderate', $moderate);
        $qb->orderBy('a.startAt', 'DESC');

        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer liste des evenements pour une association
     * @param type $association
     * @param type $page
     * @return type
     */
    public function getV1EventsByAssociation($association, $page, $limit = 6)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.association = :id');
        $qb->setParameter('id', $association);
        $qb->orderBy('a.startAt', 'DESC');
        $qb->setMaxResults($limit)
                ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer liste des evenements pour un association avec filter
     * @param type $merchant
     * @param type $page
     * @return type
     */
    public function getV1EventsByAssociationFilter($association, $personalized, $page, $limit = 6)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.association = :id');
        $qb->setParameter('id', $association);
        $qb->andWhere('a.personalized = :personalized');
        $qb->setParameter('personalized', $personalized);
        $qb->orderBy('a.startAt', 'DESC');
        $qb->setMaxResults($limit)
                ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer liste des evenements pour un commercant
     * @param type $merchant
     * @param type $page
     * @return type
     */
    public function getV1EventsByMerchant($merchant, $page, $limit = 6)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.merchant = :id');
        $qb->setParameter('id', $merchant);
        $qb->orderBy('a.startAt', 'DESC');
        $qb->setMaxResults($limit)
                ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer liste des evenements pour un commercant avec filter
     * @param type $merchant
     * @param type $page
     * @return type
     */
    public function getV1EventsByMerchantFilter($merchant, $personalized, $page, $limit = 6)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.merchant = :id');
        $qb->setParameter('id', $merchant);
        $qb->andWhere('a.personalized = :personalized');
        $qb->setParameter('personalized', $personalized);
        $qb->orderBy('a.startAt', 'DESC');
        $qb->setMaxResults($limit)
                ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les événements en prenant compte des filters pour Associations
     * @param type $user
     * @param type $enabled
     * @param type $city
     * @param type $datetime
     * @return type
     */
    public function getV1AllEventAssociationsByIntercom($user, $enabled, $city, $datetime, $userinterests)
    {
        $cities = explode(",", $city);
        $now = new \DateTime();
        $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
        $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");

        $qb = $this->createQueryBuilder('a');
        $qb->join('a.association', 'assoc');
        $qb->join('assoc.city', 'ac');
        $qb->where('ac.id IN (:cities)');
        $qb->andWhere('assoc.category IN (:userinterestIds)');
        $qb->andWhere('a.enabled = :enabled');
        $qb->andWhere('a.moderate = :moderate');
        $qb->andWhere('a.type = :type');
        switch ($datetime) {
            case 'today':
                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case 'weekend':
                $from = new \DateTime('next Saturday');
                $to = new \DateTime('next Sunday');
                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d 23:59:59') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '1month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +1 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +1 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '2month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +2 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +2 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '3month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +3 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +3 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '4month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +4 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +4 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '5month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +5 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +5 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '6month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +6 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +6 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '7month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +7 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +7 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '8month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +8 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +8 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '9month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +9 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +9 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '10month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +10 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +10 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '11month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +11 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +11 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            case '12month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +12 month');

                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $to->modify('last day of +12 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
            default:
                //echo "param1";
                $qb->andwhere('a.startAt >= :startAt');
                $qb->setParameters(array('startAt' => $from, 'enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'association', 'cities' => $cities));
                break;
        }

        $qb->orderBy('a.startAt', 'DESC');

        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les événements en prenant compte des filters pour Merchants
     * @param type $user
     * @param type $enabled
     * @param type $city
     * @param type $datetime
     * @return type
     */
    public function getV1AllEventByMerchantsIntercom($user, $enabled, $city, $datetime, $userinterests)
    {
        $cities = explode(",", $city);
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.merchant', 'mer');
        $qb->join('mer.city', 'mc');
        $qb->where('mc.id IN (:cities)');
        $qb->andWhere('mer.category IN (:userinterestIds)');
        $qb->andWhere('a.enabled = :enabled');
        $qb->andWhere('a.moderate = :moderate');
        $qb->andWhere('a.type = :type');

        $now = new \DateTime();
        $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
        $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
        switch ($datetime) {
            case 'today':
                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case 'weekend':
                $from = new \DateTime('next Saturday');
                $to = new \DateTime('next Sunday');
                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '1month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +1 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +1 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '2month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +2 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +2 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '3month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +3 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +3 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '4month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +4 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +4 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '5month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +5 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +5 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '6month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +6 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +6 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '7month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +7 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +7 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '8month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +8 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +8 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '9month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +9 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +9 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '10month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +10 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +10 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '11month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +11 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +11 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            case '12month':
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $to->modify('first day of +12 month');

                $to = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $to = $to->modify('last day of +12 month');

                $qb->andWhere($qb->expr()->between('a.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                $qb->setParameters(array('enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
            default:
                $qb->andwhere('a.startAt >= :startAt');
                $qb->setParameters(array('startAt' => $from, 'enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterests, 'type' => 'merchant', 'cities' => $cities));
                break;
        }
        $qb->orderBy('a.startAt', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function getV1EventsAssociationsByInterest($user, $enabled, $userinterestIds)
    {
        $now = new \DateTime();
        $startAt = new \DateTime($now->format("Y-m-d") . " 00:00:00");
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.association', 'assoc');
        $qb->join('assoc.city', 'ac');
        $qb->where('ac.id IN (:cities)');
        $qb->andWhere('assoc.category IN (:userinterestIds)');
        $qb->andWhere('a.enabled = :enabled');
        $qb->andWhere('a.moderate = :moderate');
        $qb->andWhere('a.type = :type');
        $qb->andwhere('a.startAt >= :startAt');
        $qb->setParameters(array('startAt' => $startAt, 'enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterestIds, 'type' => 'association', 'cities' => $user->getCitiesIds()));
        $qb->orderBy('a.startAt', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function getV1EventsMerchantsByInterest($user, $enabled, $userinterestIds)
    {
        $now = new \DateTime();
        $startAt = new \DateTime($now->format("Y-m-d") . " 00:00:00");
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.merchant', 'mer');
        $qb->join('mer.city', 'mc');
        $qb->where('mc.id IN (:cities)');
        $qb->andWhere('mer.category IN (:userinterestIds)');
        $qb->andWhere('a.enabled = :enabled');
        $qb->andWhere('a.moderate = :moderate');
        $qb->andWhere('a.type = :type');
        $qb->andwhere('a.startAt >= :startAt');
        $qb->setParameters(array('startAt' => $startAt, 'enabled' => $enabled, 'moderate' => "accepted", 'userinterestIds' => $userinterestIds, 'type' => 'merchant', 'cities' => $user->getCitiesIds()));
        $qb->orderBy('a.startAt', 'DESC');

        return $qb->getQuery()->getResult();
    }

    

    public function getV1LastCommentedEventsByMerchant($merchant)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->setMaxResults(3);
        $qb->join('e.comments', 'com');
        $qb->where('e.merchant = :merchant')->setParameter('merchant', $merchant);
        $qb->addOrderBy('com.createAt', 'DESC');
        $qb->distinct();

        $commented = $qb->getQuery()->getResult();
        $ids = array();
        foreach ($commented as $article) {
            $ids[] = $article->getId();
        }
        if (count($commented) < 3) {
            $qb1 = $this->createQueryBuilder('e');
            $qb1->setMaxResults(3 - count($commented));
            if ($ids) {
                $qb1->where('e.id NOT IN (:ids)')->setParameter('ids', $ids);
            }
            $qb1->andWhere('e.merchant = :merchant')->setParameter('merchant', $merchant);
            $qb1->addOrderBy('e.createAt', 'DESC');
            $qb1->distinct();

            $notCommented = $qb1->getQuery()->getResult();
            $articles = array_merge($commented, $notCommented);
            return $articles;
        } else {
            return $qb->getQuery()->getResult();
        }
    }

    public function getV1AssociationsEventsByUserInterest($user, $city, $period)
    {
        $now = new \DateTime();
        $interestsIds = [];
        $cities = explode(",", $city);
        $interests = $user->getInterests();
        foreach ($interests as $interest) {
            $interestsIds[] = $interest->getId();
        }
        $todayStart = new \DateTime($now->format("Y-m-d") . " 00:00:00");
        $todayEnd = new \DateTime($now->format("Y-m-d") . " 23:59:59");
        $qb = $this->createQueryBuilder('e');
        //$qb->select('e.id, e.startAt');
        $qb->join('e.association', 'assoc');
        $qb->join('assoc.city', 'ac');
        $qb->where('ac.id IN (:cities)');
        $qb->setParameter('cities', $cities);
        $qb->andWhere('assoc.category IN (:interests)');
        $qb->setParameter('interests', $interestsIds);
        $qb->andWhere('e.enabled = :enabled');
        $qb->setParameter('enabled', true);
        $qb->andWhere('e.moderate = :moderate');
        $qb->setParameter('moderate', "accepted");
        $qb->andWhere('e.startAt > :now');
        $qb->setParameter('now', $now->format('Y-m-d 00:00:00'));
        $qb->orderBy('e.startAt', 'DESC');
        switch ($period) {
            case 'today':
                $today = new \DateTime('now');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $today->format('Y-m-d 00:00:00') . "'", "'" . $today->format('Y-m-d 23:59:59') . "'"));
                break;

            case 'weekend':
                $from = new \DateTime('next Saturday');
                $to = new \DateTime('next Sunday');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d 23:59:59') . "'"));
                break;

            case '1month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +1 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +1 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '2month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +2 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +2 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '3month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +3 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +3 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '4month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +4 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +4 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '5month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +5 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +5 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '6month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +6 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +6 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '7month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +7 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +7 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '8month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +8 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +8 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '9month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +9 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +9 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '10month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +10 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +10 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '11month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +11 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +11 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '12month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +12 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +12 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;
        }

        return $qb->getQuery()->getResult();
    }

    public function getV1MerchantsEventsByUserInterest($user, $city, $period)
    {
        $now = new \DateTime();
        $interestsIds = [];
        $cities = explode(",", $city);
        $interests = $user->getInterests();
        foreach ($interests as $interest) {
            $interestsIds[] = $interest->getId();
        }

        $todayStart = new \DateTime($now->format("Y-m-d") . " 00:00:00");
        $todayEnd = new \DateTime($now->format("Y-m-d") . " 23:59:59");
        $qb = $this->createQueryBuilder('e');
        //$qb->select('e.id, e.startAt');
        $qb->join('e.merchant', 'mer');
        $qb->join('mer.city', 'ac');
        $qb->where('ac.id IN (:cities)');
        $qb->setParameter('cities', $cities);
        $qb->andWhere('mer.category IN (:interests)');
        $qb->setParameter('interests', $interestsIds);
        $qb->andWhere('e.enabled = :enabled');
        $qb->setParameter('enabled', true);
        $qb->andWhere('e.moderate = :moderate');
        $qb->setParameter('moderate', "accepted");
        $qb->andWhere('e.startAt > :now');
        $qb->setParameter('now', $now->format('Y-m-d 00:00:00'));
        $qb->orderBy('e.startAt', 'DESC');
        switch ($period) {
            case 'today':
                $today = new \DateTime('now');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $today->format('Y-m-d 00:00:00') . "'", "'" . $today->format('Y-m-d 23:59:59') . "'"));
                break;

            case 'weekend':
                $from = new \DateTime('next Saturday');
                $to = new \DateTime('next Sunday');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d 23:59:59') . "'"));
                break;

            case '1month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +1 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +1 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '2month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +2 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +2 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '3month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +3 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +3 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '4month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +4 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +4 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '5month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +5 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +5 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '6month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +6 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +6 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '7month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +7 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +7 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '8month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +8 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +8 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '9month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +9 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +9 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '10month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +10 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +10 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '11month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +11 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +11 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '12month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +12 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +12 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;
        }

        return $qb->getQuery()->getResult();
    }

    /*     * *** V2 ******* */

    /**
     *  TODO : Prendre en considération les ancien evenements en ajoutant la catégorie de créateur comme catégorie evenement
     * Mila et Prod
     * @param type $user
     * @param type $city
     * @param type $period
     * @return type
     */
    public function getV2AssociationsEventsByUserInterest($user, $city, $period)
    {
        $now = new \DateTime();
        $interestsIds = [];
        $cities = explode(",", $city);
        $interests = $user->getInterests();
        foreach ($interests as $interest) {
            $interestsIds[] = $interest->getId();
        }
        $todayStart = new \DateTime($now->format("Y-m-d") . " 00:00:00");
        $todayEnd = new \DateTime($now->format("Y-m-d") . " 23:59:59");
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.type')
                ->leftJoin('e.image', 'img')
                ->addSelect('img.id AS image')
                ->join('e.association', 'assoc')
                ->addSelect("assoc.id AS creatorId, assoc.name AS creatorName")
                ->leftJoin('assoc.image', 'associmg')
                ->addSelect('associmg.id AS creatorImg')
                ->join('assoc.city', 'ac')
                ->addSelect("ac.id AS cityId, ac.name AS cityName")
                ->where('ac.id IN (:cities)')
                ->setParameter('cities', $cities)
                ->andWhere('assoc.category IN (:interests)')
                ->setParameter('interests', $interestsIds)
                ->andWhere('e.enabled = :enabled')
                ->setParameter('enabled', true)
                ->andWhere('e.moderate = :moderate')
                ->setParameter('moderate', "accepted");

        $qb->andWhere('e.startAt > :now');
        $qb->setParameter('now', $now->format('Y-m-d 00:00:00'))
                ->orderBy('e.startAt', 'DESC')
                ->groupBy('e.id');
        switch ($period) {
            case 'today':
                $today = new \DateTime('now');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $today->format('Y-m-d 00:00:00') . "'", "'" . $today->format('Y-m-d 23:59:59') . "'"));
                break;

            case 'weekend':
                $from = new \DateTime('next Saturday');
                $to = new \DateTime('next Sunday');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d 23:59:59') . "'"));
                break;

            case '1month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +1 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +1 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '2month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +2 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +2 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '3month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +3 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +3 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '4month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +4 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +4 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '5month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +5 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +5 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '6month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +6 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +6 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '7month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +7 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +7 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '8month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +8 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +8 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '9month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +9 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +9 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '10month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +10 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +10 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '11month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +11 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +11 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '12month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +12 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +12 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;
        }

        return $qb->getQuery()->getResult();
    }

    public function getV2MerchantsEventsByUserInterest($user, $city, $period)
    {
        $now = new \DateTime();
        $interestsIds = [];
        $cities = explode(",", $city);
        $interests = $user->getInterests();
        foreach ($interests as $interest) {
            $interestsIds[] = $interest->getId();
        }

        $todayStart = new \DateTime($now->format("Y-m-d") . " 00:00:00");
        $todayEnd = new \DateTime($now->format("Y-m-d") . " 23:59:59");
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.type')
                ->join('e.merchant', 'mer')
                ->leftJoin('e.image', 'img')
                ->addSelect('img.id AS image')
                ->addSelect("mer.id AS creatorId, mer.name AS creatorName")
                ->leftJoin('mer.image', 'merimg')
                ->addSelect('merimg.id AS creatorImg')
                ->join('mer.city', 'ac')
                ->addSelect("ac.id AS cityId, ac.name AS cityName")
                ->where('ac.id IN (:cities)')
                ->setParameter('cities', $cities)
                ->andWhere('mer.category IN (:interests)')
                ->setParameter('interests', $interestsIds)
                ->andWhere('e.enabled = :enabled')
                ->setParameter('enabled', true)
                ->andWhere('e.moderate = :moderate')
                ->setParameter('moderate', "accepted");
        $qb->andWhere('e.startAt > :now');
        $qb->setParameter('now', $now->format('Y-m-d 00:00:00'))
                ->orderBy('e.startAt', 'DESC')
                ->groupBy('e.id');
        switch ($period) {
            case 'today':
                $today = new \DateTime('now');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $today->format('Y-m-d 00:00:00') . "'", "'" . $today->format('Y-m-d 23:59:59') . "'"));
                break;

            case 'weekend':
                $from = new \DateTime('next Saturday');
                $to = new \DateTime('next Sunday');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d 23:59:59') . "'"));
                break;

            case '1month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +1 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +1 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '2month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +2 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +2 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '3month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +3 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +3 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '4month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +4 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +4 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '5month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +5 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +5 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '6month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +6 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +6 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '7month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +7 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +7 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '8month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +8 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +8 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '9month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +9 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +9 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '10month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +10 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +10 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '11month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +11 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +11 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;

            case '12month':
                // date from first day of month
                $from = new \DateTime($now->format("Y-m-d") . " 00:00:00");
                $from = $todayStart->modify('first day of +12 month');
                // date to last day of month
                $to = new \DateTime($now->format("Y-m-d") . " 23:59:59");
                $to = $todayEnd->modify('last day of +12 month');
                $qb->andWhere($qb->expr()->between('e.startAt', "'" . $from->format('Y-m-d H:i:s') . "'", "'" . $to->format('Y-m-d H:i:s') . "'"));
                break;
        }

        return $qb->getQuery()->getResult();
    }

    public function appSearchByTitleCreator($user, $key, $theme, $city)
    {
        $now = new \DateTime();
        if ($city == "all") {
            $cities = $user->getCommunities();
        } else {
            $cities = $city;
        }

        $comm = [];

        foreach ($cities as $city) {
            if($city->getType() == 'approved'){
                $comm[]=$city->getCommunity();
            }

        }

        $qb = $this->createQueryBuilder('e')
                ->select('e.id, e.title, e.startAt, e.type')
                ->leftJoin('e.image', 'img')
                ->addSelect('img.id AS image')
                ->andWhere("e.community IN (:cities) AND e.enabled = :enabled")
                ->orWhere("e.secondaryCommunity IN (:cities) AND e.moderateSecondaryCommunity = :moderate");



        if ($key) {
            $qb->andWhere("e.title LIKE :title")
                    ->leftJoin("e.association", "association")
                    ->orWhere("e.type = 'association' AND association.name LIKE :title")

                    ->leftJoin("e.community", "cityhall")
                    ->orWhere("e.type = 'community' AND cityhall.name LIKE :title")
                    ->setParameter("title", '%' . $key . '%');
        }

        if ($theme) {
            $qb->join("e.categories", "cat")
                    ->orWhere("cat.id = :category")
                    ->setParameter("category", $theme);
        }
        $qb


                ->setParameter("cities", $comm)
                ->andWhere('e.startAt > :now')
                ->setParameter('now', $now->format('Y-m-d 00:00:00'))
                ->andWhere('e.enabled = :enabled')->setParameter('enabled', true)
                ->andWhere('e.moderate = :moderate OR e.moderateSecondaryCommunity = :moderate')
                ->setParameter('moderate', "accepted")
                ->orderBy('e.startAt', 'DESC')
                ->groupBy('e.id');
        return $qb->getQuery()->getResult();
    }

    public function appSearchByDescription($user, $key, $theme, $city)
    {
        $now = new \DateTime();
        if ($city == "all") {
            $cities = $user->getCommunities();
        } else {
            $cities = $city;
        }

        $comm = [];

        foreach ($cities as $city) {
            if($city->getType() == 'approved'){
                $comm[]=$city->getCommunity();
            }

        }
        $qb = $this->createQueryBuilder('e')
                ->select('e.id, e.title, e.startAt, e.type')
                ->leftJoin('e.image', 'img')
                ->addSelect('img.id AS image')
            ->andWhere("e.community IN (:cities) AND e.enabled = :enabled")
            ->orWhere("e.secondaryCommunity IN (:cities) AND e.moderateSecondaryCommunity = :moderate");


        if ($key) {
            $qb->andWhere("e.description LIKE :description")
                    ->setParameter("description", '%' . $key . '%');
        }

        if ($theme) {
            $qb->join("e.categories", "cat")
                    ->orWhere("cat.id = :category")
                    ->setParameter("category", $theme);
        }
        $qb
                ->setParameter("cities", $comm)
                ->andWhere('e.startAt > :now')
                ->setParameter('now', $now->format('Y-m-d 00:00:00'))
                ->andWhere('e.enabled = :enabled')->setParameter('enabled', true)
                ->andWhere('e.moderate = :moderate')
                ->setParameter('moderate', "accepted")
                ->orderBy('e.startAt', 'DESC')
                ->groupBy('e.id');
        return $qb->getQuery()->getResult();
    }

    /**
     * @param $communities
     * @param array $cities
     * @param array $categories
     * @param string $period
     * @return array
     */
    public function getPublicAssocEventsByCommunity($communities, $cities = array(), $categories = array(), $period = null)
    {
        $date = new \DateTime();
        if ($period) {
            $date = \DateTime::createFromFormat('Y-m-d', $period);
        }

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.endAt, e.type, e.private, e.enabled, e.description')
                ->leftJoin("e.categories", "cat")
                ->addSelect('cat.name AS categoryName')
                ->leftJoin('e.image', 'img')
                ->addSelect('img.id AS image')
                ->join('e.association', 'assoc')
                ->addSelect('comm.name AS communityName')
                ->addSelect("assoc.id AS creatorId, assoc.name AS creatorName")
                ->leftJoin('assoc.image', 'associmg')
                ->leftJoin('assoc.community', 'comm')
                ->addSelect('associmg.id AS creatorImg')
                ->leftJoin('e.city', 'ac')
                ->addSelect("ac.id AS cityId, ac.name AS cityName")
                ->andWhere('e.enabled = :enabled')
                ->setParameter('enabled', true)
                ->andWhere('e.private = :private')
                ->setParameter('private', false)
                ->andWhere('e.moderate = :moderate')
                ->setParameter('moderate', "accepted")
                ->andWhere('e.startAt >= :now')
                ->andWhere('e.community IN (:communities)')->setParameter('communities', $communities)
                ->setParameter('now', $date->format('Y-m-d 00:00:00'))
                ->orderBy('e.startAt', 'DESC')->groupBy('e.id');

        if ($cities) {
            $qb->andWhere('e.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->andWhere('cat.id IN (:categories)')->setParameter('categories', $categories);
        }

        return $qb->getQuery()->getResult();
    }
    /**
     * @param $communities
     * @param array $cities
     * @param array $categories
     * @param string $period
     * @return array
     */
    public function getEventsSecondaryCommunities($communities, $cities = array(), $categories = array(), $period = null)
    {
        $date = new \DateTime();
        if ($period) {
            $date = \DateTime::createFromFormat('Y-m-d', $period);
        }

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.endAt, e.type, e.private, e.enabled, e.description')
            ->leftJoin("e.categories", "cat")
            ->addSelect('cat.name AS categoryName')
            ->leftJoin('e.image', 'img')
            ->addSelect('img.id AS image')
            ->join('e.association', 'assoc')
            ->addSelect('comm.name AS communityName')
            ->addSelect("assoc.id AS creatorId, assoc.name AS creatorName")
            ->leftJoin('assoc.image', 'associmg')
            ->leftJoin('assoc.community', 'comm')
            ->addSelect('associmg.id AS creatorImg')
            ->leftJoin('e.city', 'ac')
            ->addSelect("ac.id AS cityId, ac.name AS cityName")
            ->andWhere('e.enabled = :enabled')
            ->setParameter('enabled', true)
            ->andWhere('e.private = :private')
            ->setParameter('private', false)
            ->andWhere('e.moderateSecondaryCommunity = :moderate')
            ->setParameter('moderate', "accepted")
            ->andWhere('e.startAt >= :now')
            ->andWhere('e.secondaryCommunity IN (:communities)')->setParameter('communities', $communities)
            ->setParameter('now', $date->format('Y-m-d 00:00:00'))
            ->orderBy('e.startAt', 'DESC')->groupBy('e.id');

        if ($cities) {
            $qb->andWhere('e.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->andWhere('cat.id IN (:categories)')->setParameter('categories', $categories);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $associations
     * @param array $cities
     * @param array $categories
     * @param string $period
     * @param boolean $withDisabled
     * @return array
     */
    public function getEventsPrivateAssociations($associations, $cities = array(), $categories = array(), $period = null, $withDisabled = false)
    {
        $date = new \DateTime();
        if ($period) {
            $date = \DateTime::createFromFormat('Y-m-d', $period);
        }

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.endAt, e.type, e.private, e.enabled, e.description')
            ->leftJoin("e.categories", "cat")
            ->addSelect('cat.name AS categoryName')
            ->leftJoin('e.image', 'img')
            ->addSelect('img.id AS image')
            ->join('e.association', 'assoc')
            ->leftJoin('assoc.community', 'comm')
            ->addSelect('comm.name AS communityName')
            ->addSelect("assoc.id AS creatorId, assoc.name AS creatorName")
            ->leftJoin('assoc.image', 'associmg')
            ->addSelect('associmg.id AS creatorImg')
            ->leftJoin('e.city', 'ac')
            ->addSelect("ac.id AS cityId, ac.name AS cityName")
            ;

        if($withDisabled){
            $qb->andWhere('e.enabled = :enabled')
                ->setParameter('enabled', true);
        }

        $qb->andWhere('e.private = :private')
            ->andWhere('e.private = :private')->setParameter('private', true)
            ->andWhere('e.association IN (:associations)')->setParameter('associations', $associations)
            ->andWhere('e.moderate = :moderate')
            ->setParameter('moderate', "accepted")
            ->andWhere('e.startAt >= :now')
            ->setParameter('now', $date->format('Y-m-d 00:00:00'))
            ->orderBy('e.startAt', 'DESC')->groupBy('e.id');

        if ($cities) {
            $qb->andWhere('e.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->andWhere('cat.id IN (:categories)')->setParameter('categories', $categories);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $associations
     * @param array $cities
     * @param array $categories
     * @param string $period
     * @return array
     */
    public function getEventsAssociationsMembers($associations, $cities = array(), $categories = array(), $period = null, $withDisabled = false)
    {
        $date = new \DateTime();
        if ($period) {
            $date = \DateTime::createFromFormat('Y-m-d', $period);
        }

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.endAt, e.type, e.private, e.enabled, e.description')
            ->leftJoin("e.categories", "cat")
            ->addSelect('cat.name AS categoryName')
            ->leftJoin('e.image', 'img')
            ->addSelect('img.id AS image')
            ->join('e.association', 'assoc')
            ->leftJoin('assoc.community', 'comm')
            ->addSelect('comm.name AS communityName')
            ->addSelect("assoc.id AS creatorId, assoc.name AS creatorName")
            ->leftJoin('assoc.image', 'associmg')
            ->addSelect('associmg.id AS creatorImg')
            ->leftJoin('e.city', 'ac')
            ->addSelect("ac.id AS cityId, ac.name AS cityName")
            ;
        if($withDisabled){
            $qb->andWhere('e.enabled = :enabled')
                ->setParameter('enabled', true);
        }

        $qb->andWhere('e.private = :private')->setParameter('private', false)
            ->andWhere('e.association IN (:associations)')->setParameter('associations', $associations)
            ->andWhere('e.moderate = :moderate')
            ->setParameter('moderate', "accepted")
            ->andWhere('e.startAt >= :now')
            ->setParameter('now', $date->format('Y-m-d 00:00:00'))
            ->orderBy('e.startAt', 'DESC')->groupBy('e.id');

        if ($cities) {
            $qb->andWhere('e.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->andWhere('cat.id IN (:categories)')->setParameter('categories', $categories);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $communities
     * @param array $cities
     * @param array $categories
     * @param string $period
     * @return array
     */
    public function getCommunitiesEventsByUser($communities, $cities = array(), $categories = array(), $period = null)
    {
        $date = new \DateTime();
        if ($period) {
            $date = \DateTime::createFromFormat('Y-m-d', $period);
        }

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.endAt, e.type, e.private, e.enabled, e.description')
                ->join('e.community', 'ch')
                ->leftJoin("e.categories", "cat")
                ->addSelect('cat.name AS categoryName')
                ->addSelect('ch.name AS communityName')
                ->leftJoin('e.image', 'img')
                ->addSelect('img.id AS image')
                ->addSelect("ch.id AS creatorId, ch.name AS creatorName")
                ->leftJoin('ch.image', 'chimg')
                ->addSelect('chimg.id AS creatorImg')
                ->leftJoin('e.city', 'ac')
                ->addSelect("ac.id AS cityId, ac.name AS cityName")
                ->andWhere('e.type = :type')
                ->setParameter('type', 'community')
                ->andWhere('e.enabled = :enabled')
                ->setParameter('enabled', true)
                ->andWhere('e.moderate = :moderate')
                ->setParameter('moderate', "accepted")
                ->andWhere('e.community IN (:communities)')->setParameter('communities', $communities)
                ->andWhere('e.startAt >= :now')
                ->setParameter('now', $date->format('Y-m-d 00:00:00'))
                ->orderBy('e.startAt', 'DESC')->groupBy('e.id');

        if ($cities) {
            $qb->andWhere('e.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->andWhere('cat.id IN (:categories)')->setParameter('categories', $categories);
        }

        return $qb->getQuery()->getResult();
    }
    
    public function findEventParticiped($id)
    {
        $now = new \DateTime();
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.type');
        $qb->join('e.participants', 'p');
        $qb->leftJoin('e.article', 'a');
        $qb->addSelect('p.id AS userId');
        $qb->addSelect('a.id AS articleId');
        $qb->where('p.id = :id');
        $qb->setParameter("id", $id);
        $qb->andWhere('e.startAt <= :dateNow');
        $qb->setParameter('dateNow', $now);
        $qb->andWhere('e.endAt >= :dateNow');
        $qb->setParameter('dateNow', $now);

        return $qb->getQuery()->getResult();
    }
    public function getFinishedEvents()
    {
        $now = new \DateTime();
        $qb = $this->createQueryBuilder('e')
          ->where('e.participantsNbre is NULL')
          ->andWhere('e.endAt <= :dateNow')
          ->setParameter('dateNow', $now)
          ->andWhere('e.enabled = :enabled')
          ->setParameter('enabled', true);

        return $qb->getQuery()->getResult();
    }

    public function findNextByDate(
        $minDate,
        $eventId
    ) {
        $qb = $this ->createQueryBuilder('e')
          ->Where('e.startAt >= :minDate')
          ->andWhere('e.idParent = :eventId');

        $qb->setParameters(
          ["minDa" => $minDate, "duplicateEventId"  =>  $duplicateEventId]
        );

        return $qb->getQuery()->getResult();
    }

    public function removeNextEvents($event)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->delete('\AppBundle\Entity\Event', 'e')
            ->where('e.startAt >= :date')
            ->andWhere('e.parent = :parent')
            ->setParameter('date', $event->getStartAt())
            ->setParameter('parent', $event->getParent());

        return $qb->getQuery()->getResult();
    }

    public function getNextEvents($event)
    {
        $qb = $this->createQueryBuilder('e');
        $qb ->select('e')
            ->where('e.startAt >= :date')
            ->andWhere('e.parent = :parent')
            ->setParameter('date', $event->getStartAt())
            ->setParameter('parent', $event->getParent());

        return $qb->getQuery()->getResult();
    }
}
