<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends EntityRepository
{
    public function countUnreadNotifications($user)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->select('COUNT(n)');
        $qb->andWhere('n.user = :user')->setParameter('user', $user);
        $qb->andWhere('n.seen = :seen')->setParameter('seen', false);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function findUnreadNotifications($user)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->where('n.user = :user')->setParameter('user', $user);
        $qb->andWhere('n.seen = :seen')->setParameter('seen', false);
        $qb->andWhere('n.participantsInformed = :false')->setParameter('false', false);
        return $qb->getQuery()->getResult();
    }
    
    public function findUnreadEventNotification($user)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->select('n.id, n.type, n.message, n.createAt, n.seen');
        $qb->join('n.event', 'e');
        $qb->addSelect("e.id  AS event");
        $qb->where('n.user = :user')->setParameter('user', $user);
        $qb->andWhere('n.participantsInformed = :false')->setParameter('false', false);
        return $qb->getQuery()->getResult();
    }
    public function findParticipationNotification($user)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->select('n.id, n.type, n.message, n.createAt, n.seen');
        $qb->join('n.event', 'e');
        $qb->addSelect("e.id  AS event");
        $qb->where('n.user = :user')->setParameter('user', $user);
        $qb->andWhere('n.participantsInformed = :true')->setParameter('true', true);
        return $qb->getQuery()->getResult();
    }

    public function findUnreadArticleNotification($user)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->select('n.id, n.type, n.message, n.createAt, n.seen');
        $qb->join('n.article', 'a');
        $qb->addSelect("a.id   AS article");
        $qb->where('n.user = :user')->setParameter('user', $user);
        return $qb->getQuery()->getResult();
    }
    
    public function findUnreadCommentNotification($user)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->select('n.id, n.type, n.message, n.createAt, n.seen');
        $qb->join('n.comment', 'c');
        $qb->addSelect("c.id   AS comment");
        $qb->join('c.article', 'a');
        $qb->addSelect("a.id   AS article_comment");
        $qb->where('n.user = :user')->setParameter('user', $user);
        return $qb->getQuery()->getResult();
    }
    
    public function findAssociationCommentNotification($user)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->select('n.id, n.type, n.message, n.createAt, n.seen');
        $qb->join('n.association', 'assoc');
        $qb->addSelect("assoc.id   AS association");
        $qb->where('n.user = :user')->setParameter('user', $user);
        return $qb->getQuery()->getResult();
    }
    
    public function findMerchantCommentNotification($user)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->select('n.id, n.type, n.message, n.createAt, n.seen');
        $qb->join('n.merchant', 'm');
        $qb->addSelect("m.id   AS merchant");
        $qb->where('n.user = :user')->setParameter('user', $user);
        return $qb->getQuery()->getResult();
    }
    public function findAdminsNotification($user)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->select('n.id, n.type, n.message, n.createAt, n.seen');
        $qb->where('n.user = :user')->setParameter('user', $user);
        $qb->andWhere('n.type = :type')->setParameter('type', 'admin');
        return $qb->getQuery()->getResult();
    }

    public function deleteMoreThanWeek()
    {
        $date = new \DateTime();
        $date->modify('-1 week');
        $qb = $this->createQueryBuilder('n');
        $qb->delete('\AppBundle\Entity\Notification','n');

        $qb->where('n.createAt < :date')->setParameter('date',$date);
        return $qb->getQuery()->getResult();
    }


}
