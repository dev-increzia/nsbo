<?php

namespace AppBundle\Repository;

use AppBundle\Entity\GoodPlan;

/**
 * GoodPlanRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GoodPlanRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param $page
     * @param $order
     * @param $cityhall
     * @param $type
     * @param $title
     * @param $enabled
     * @param $moderate
     * @param $wait
     * @param $dateBefore
     * @param $dateAfter
     * @param $startAt
     * @param $endAt
     * @param int $limit
     * @param bool $merchant
     * @param bool $merchant
     * @param null $volunteer
     * @param null $category
     * @return GoodPlan[]
     */
    public function search($page, $order, $cityhall, $title, $enabled, $moderate, $wait, $dateBefore, $dateAfter, $startAt, $endAt, $limit = 6)
    {
        $qb = $this->createQueryBuilder('c');
        if ($cityhall) {
            $qb->where('c.community = :cityhall')->setParameter('cityhall', $cityhall);
            $qb->orWhere('c.secondaryCommunity = :cityhall2')->setParameter('cityhall2', $cityhall);
        }
        if ($title) {
            $qb->andWhere('c.title LIKE :title')->setParameter('title', '%' . $title . '%');
        }
        if ($enabled != '' && $enabled != null) {
            $qb->andWhere('c.enabled = :enabled')->setParameter('enabled', $enabled);
        }
        if ($wait != '' && $wait == 'true') {
            $qb->andWhere('c.moderate = :moderate')->setParameter('moderate', 'wait');
        } else {
            if ($moderate != '' && $moderate != null) {
                $qb->andWhere('c.moderate = :moderate')->setParameter('moderate', $moderate);
            }
        }
        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andWhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }

        if ($startAt) {
            $startAt = substr($startAt, 6, 4) . '-' . substr($startAt, 3, 2) . '-' . substr($startAt, 0, 2) . ' ' . substr($startAt, 11, 8);
            $qb->andWhere('c.startAt >= :startAt')->setParameter('startAt', $startAt);
        }
        if ($endAt) {
            $endAt = substr($endAt, 6, 4) . '-' . substr($endAt, 3, 2) . '-' . substr($endAt, 0, 2) . ' ' . substr($endAt, 11, 8);
            $qb->andWhere('c.endAt <= :endAt')->setParameter('endAt', $endAt);
        }

        if (is_array($order)) {
            foreach ($order as $orderName => $orderType) {
                $qb->orderBy('c.' . $orderName, $orderType);
            }
        }
        if ($page !== false) {
            $qb->setMaxResults($limit)
                ->setFirstResult($page * $limit);
        }

        return $qb->getQuery()->getResult();
    }


    public function getPublicMerchantGoodPlanByCommunity($communities, $cities = array(), $categories = array(), $period = null)
    {

        $date = new \DateTime();
        if ($period) {
            $date = \DateTime::createFromFormat('Y-m-d', $period);
        }

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.endAt,  e.private')
            ->leftJoin("e.categories", "cat")
            ->addSelect('cat.name AS categoryName')
            ->leftJoin('e.image', 'img')
            ->addSelect('img.id AS image')
            ->join('e.merchant', 'merch')
            ->addSelect("merch.id AS creatorId, merch.name AS creatorName")
            ->leftJoin('merch.image', 'merchimg')
            ->addSelect('merchimg.id AS creatorImg')
            ->leftJoin('e.city', 'ac')
            ->addSelect("ac.id AS cityId, ac.name AS cityName")
            ->andWhere('e.enabled = :enabled')
            ->setParameter('enabled', true)
            ->andWhere('e.private = :private')
            ->setParameter('private', false)
            ->andWhere('e.moderate = :moderate')
            ->setParameter('moderate', "accepted")
            ->leftJoin('e.community', 'com')
            ->addSelect('com.name AS communityName')
            ->andWhere('e.community IN (:communities) AND e.moderate = :accepted')
            ->orWhere('e.secondaryCommunity IN (:communities) AND e.moderateSecondaryCommunity = :accepted')
            ->andWhere('e.startAt >= :now')
            ->setParameter('communities', $communities)
            ->setParameter('accepted', 'accepted')
            ->setParameter('now', $date->format('Y-m-d 00:00:00'))
            ->orderBy('e.startAt', 'DESC')->groupBy('e.id');

        if ($cities) {
            $qb->andWhere('e.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->andWhere('cat.id IN (:categories)')->setParameter('categories', $categories);
        }

        return $qb->getQuery()->getResult();
    }

    public function getGoodPlansPrivateMerchants($merchants, $cities = array(), $categories = array(), $period = null)
    {

        $date = new \DateTime();
        if ($period) {
            $date = \DateTime::createFromFormat('Y-m-d', $period);
        }

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.endAt,  e.private')
            ->leftJoin("e.categories", "cat")
            ->addSelect('cat.name AS categoryName')
            ->leftJoin('e.image', 'img')
            ->addSelect('img.id AS image')
            ->join('e.merchant', 'merch')
            ->addSelect("merch.id AS creatorId, merch.name AS creatorName")
            ->leftJoin('merch.image', 'merchimg')
            ->addSelect('merchimg.id AS creatorImg')
            ->leftJoin('e.city', 'ac')
            ->addSelect("ac.id AS cityId, ac.name AS cityName")
            ->andWhere('e.enabled = :enabled')
            ->setParameter('enabled', true)
            ->leftJoin('e.community', 'com')
            ->addSelect('com.name AS communityName')
            ->andWhere('e.private = :private')
            ->andWhere('e.private = :private')->setParameter('private', true)
            ->andWhere('e.merchant IN (:merchants)')->setParameter('merchants', $merchants)
            ->andWhere('e.moderate = :moderate')
            ->setParameter('moderate', "accepted")
            ->andWhere('e.startAt >= :now')
            ->setParameter('now', $date->format('Y-m-d 00:00:00'))
            ->orderBy('e.startAt', 'DESC')->groupBy('e.id');

        if ($cities) {
            $qb->andWhere('e.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->andWhere('cat.id IN (:categories)')->setParameter('categories', $categories);
        }

        return $qb->getQuery()->getResult();
    }

    public function getGoodPlansMerchantsMembers($merchants, $cities = array(), $categories = array(), $period = null)
    {

        $date = new \DateTime();
        if ($period) {
            $date = \DateTime::createFromFormat('Y-m-d', $period);
        }

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.endAt,  e.private')
            ->leftJoin("e.categories", "cat")
            ->addSelect('cat.name AS categoryName')
            ->leftJoin('e.image', 'img')
            ->addSelect('img.id AS image')
            ->join('e.merchant', 'merch')
            ->addSelect("merch.id AS creatorId, merch.name AS creatorName")
            ->leftJoin('merch.image', 'merchimg')
            ->addSelect('merchimg.id AS creatorImg')
            ->leftJoin('e.city', 'ac')
            ->addSelect("ac.id AS cityId, ac.name AS cityName")
            ->leftJoin('e.community', 'com')
            ->addSelect('com.name AS communityName')
            ->andWhere('e.enabled = :enabled')
            ->setParameter('enabled', true)
            ->andWhere('e.private = :private')
            ->andWhere('e.private = :private')->setParameter('private', false)
            ->andWhere('e.merchant IN (:merchants)')->setParameter('merchants', $merchants)
            ->andWhere('e.moderate = :moderate')
            ->setParameter('moderate', "accepted")
            ->andWhere('e.startAt >= :now')
            ->setParameter('now', $date->format('Y-m-d 00:00:00'))
            ->orderBy('e.startAt', 'DESC')->groupBy('e.id');

        if ($cities) {
            $qb->andWhere('e.city IN (:cities)')->setParameter('cities', $cities);
        }

        if ($categories) {
            $qb->andWhere('cat.id IN (:categories)')->setParameter('categories', $categories);
        }

        return $qb->getQuery()->getResult();
    }

    public function findParticipants($id)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id');
        $qb->join('e.participants', 'p');
        $qb->addSelect('p.id AS userId, p.firstname, p.lastname');
        $qb->leftJoin('p.image', 'img');
        $qb->addSelect('img.id AS image');
        $qb->where('e.id = :id');
        $qb->setParameter("id", $id);

        return $qb->getQuery()->getResult();
    }

    public function findGoodPlan($id)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id, e.title, e.startAt, e.endAt, e.description,'
            . '  e.place');
        // image
        $qb->leftJoin('e.image', 'img');
        $qb->addSelect('img.id AS image');
        //createBy
        $qb->leftJoin('e.createBy', 'cr');
        $qb->addSelect('cr.id AS creatorId');
        // image
        $qb->leftJoin('e.city', 'cy');
        $qb->addSelect('cy.name AS city');
        // association
        $qb->leftJoin('e.merchant', 'assoc');
        $qb->addSelect("assoc.id AS merchantId, assoc.name AS merchantName");
        $qb->leftJoin('assoc.image', 'associmg');
        $qb->addSelect('associmg.id AS merchantImg');
        $qb->leftJoin('assoc.category', 'ca');
        $qb->addSelect('ca.id AS merchantCategoryId, ca.name AS merchantCategoryName');
        // city
        $qb->leftJoin('assoc.city', 'assoccy');
        $qb->addSelect('assoccy.id AS merchantCityId, assoccy.name AS merchantCityName');


        $qb->where('e.id = :id');
        $qb->setParameter('id', $id);
        return $qb->getQuery()->getOneOrNullResult();
    }

    public function appSearchByTitleCreator($user, $key, $theme, $city)
    {
        $now = new \DateTime();
        if ($city == "all") {
            $cities = $user->getCommunities();
        } else {
            $cities = $city;
        }

        $comm = [];

        foreach ($cities as $city) {
            if($city->getType() == 'approved'){
                $comm[]=$city->getCommunity();
            }

        }

        $qb = $this->createQueryBuilder('e')
            ->select('e.id, e.title, e.startAt')
            ->leftJoin('e.image', 'img')
            ->addSelect('img.id AS image')
            ->andWhere("e.community IN (:cities) AND e.enabled = :enabled")
            ->orWhere("e.secondaryCommunity IN (:cities) AND e.moderateSecondaryCommunity = :moderate");



        if ($key) {
            $qb->andWhere("e.title LIKE :title")
                ->leftJoin("e.merchant", "merchant")
                ->orWhere("merchant.name LIKE :title")

                ->leftJoin("e.community", "cityhall")

                ->setParameter("title", '%' . $key . '%');
        }

        if ($theme) {
            $qb->join("e.categories", "cat")
                ->orWhere("cat.id = :category")
                ->setParameter("category", $theme);
        }
        $qb


            ->setParameter("cities", $comm)
            ->andWhere('e.startAt > :now')
            ->setParameter('now', $now->format('Y-m-d 00:00:00'))
            ->andWhere('e.enabled = :enabled')->setParameter('enabled', true)

            ->setParameter('moderate', "accepted")
            ->orderBy('e.startAt', 'DESC')
            ->groupBy('e.id');

        return $qb->getQuery()->getResult();
    }

    public function appSearchByDescription($user, $key, $theme, $city)
    {
        $now = new \DateTime();
        if ($city == "all") {
            $cities = $user->getCommunities();
        } else {
            $cities = $city;
        }

        $comm = [];

        foreach ($cities as $city) {
            if($city->getType() == 'approved'){
                $comm[]=$city->getCommunity();
            }

        }
        $qb = $this->createQueryBuilder('e')
            ->select('e.id, e.title, e.startAt')
            ->leftJoin('e.image', 'img')
            ->addSelect('img.id AS image')
            ->andWhere("e.community IN (:cities) AND e.enabled = :enabled")
            ->orWhere("e.secondaryCommunity IN (:cities) AND e.moderateSecondaryCommunity = :moderate");


        if ($key) {
            $qb->andWhere("e.description LIKE :description")
                ->setParameter("description", '%' . $key . '%');
        }

        if ($theme) {
            $qb->join("e.categories", "cat")
                ->orWhere("cat.id = :category")
                ->setParameter("category", $theme);
        }
        $qb

            ->setParameter("cities", $comm)
            ->andWhere('e.startAt > :now')
            ->setParameter('now', $now->format('Y-m-d 00:00:00'))
            ->andWhere('e.enabled = :enabled')->setParameter('enabled', true)

            ->setParameter('moderate', "accepted")
            ->orderBy('e.startAt', 'DESC')
            ->groupBy('e.id');
        return $qb->getQuery()->getResult();
    }

    /**
     * Récupérer les articles associé à un commercant.
     * @param type $merchant
     * @param type $page
     * @return type
     */
    public function getArticlesByMerchant($merchant, $page, $limit = 6)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a.id, a.description, a.createAt,a.title, a.enabled')
            ->leftJoin('a.merchant', 'mer')

            ->addSelect("a.moderate As moderateEvent")
            ->addSelect("mer.id   AS merchantId")
            ->addSelect("mer.name   AS merchantName")
            ->leftJoin('a.city', 'ac')
            ->addSelect("ac.name   AS city")
            ->leftJoin('a.image', 'img')
            ->addSelect("img.id As image")
            ->where('a.merchant = :id')

            ->setParameter('id', $merchant)
            ->orderBy('a.createAt', 'DESC')
            ->groupBy("a.id")
            ->setMaxResults($limit)
            ->setFirstResult($page * $limit);
        return $qb->getQuery()->getResult();
    }

}
