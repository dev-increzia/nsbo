<?php

namespace UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UserBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function count($cityhall = null, $roles = array(), $lastname = null, $firstname = null, $enabled = null, $role = null, $association = null, $merchant = null, $dateBefore = null, $dateAfter = null)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->select('COUNT(u)');

        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('u.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('u.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }
        if ($roles) {
            if(!in_array('ROLE_COMMUNITY_ADMIN',$roles)) {
                foreach ($roles as $r) {

                    $qb->andWhere('u.roles LIKE :role')->setParameter('role', '%' . $r . '%');
                }
            }else {
                $qb->andWhere('u.roles LIKE :role')->setParameter('role', '%ROLE_COMMUNITY_ADMIN%');
                $qb->orWhere('u.roles LIKE :role2')->setParameter('role2', '%ROLE_COMMUNITY_SU_ADMIN%');
            }
        }

        if ($cityhall) {
            if(in_array('ROLE_COMMUNITY_ADMIN',$roles)){
                $qb->andWhere(':community MEMBER OF u.adminCommunities');
                $qb->orWhere(':community MEMBER OF u.suAdminCommunities')->setParameter('community', $cityhall);
            }else{
                $qb->innerJoin('u.communities', 'cc');
                $qb->andWhere('cc.community = :community')->setParameter('community', $cityhall);
            }

        }
       
        if ($lastname) {
            $qb->andWhere('u.lastname LIKE :lastname')->setParameter('lastname', '%' . $lastname . '%');
        }
        if ($firstname) {
            $qb->andWhere('u.firstname LIKE :firstname')->setParameter('firstname', '%' . $firstname . '%');
        }
        if ($enabled != '') {
            $qb->andWhere('u.enabled = :enabled')->setParameter('enabled', $enabled);
        }
        if ($role != '') {
            if ($role == 'associationSuAdmin') {
                $qb->innerJoin('AppBundle:Association', 'a', 'WITH', 'a.suAdmin = u.id');
                if ($association) {
                    $qb->andwhere('a.id = :assocSu')->setParameter('assocSu', $association);
                }
            } elseif ($role == 'associationAdmin') {
                $qb->innerJoin('u.associationsAdmin', 'aA');
                if ($association) {
                    $qb->andwhere('aA.id = :assocA')->setParameter('assocA', $association);
                }
            } elseif ($role == 'merchantSuAdmin') {
                $qb->innerJoin('AppBundle:Merchant', 'm', 'WITH', 'm.suAdmin = u.id');
                if ($merchant) {
                    $qb->andwhere('m.id = :merchantSu')->setParameter('merchantSu', $merchant);
                }
            } elseif ($role == 'merchantAdmin') {
                $qb->innerJoin('u.merchantsAdmin', 'mM');
                if ($merchant) {
                    $qb->andwhere('mM.id = :merchantA')->setParameter('merchantA', $merchant);
                }
            }
        }
        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $page
     * @param $order
     * @param $cityhall
     * @param $roles
     * @param $lastname
     * @param $firstname
     * @param $enabled
     * @param null $role
     * @param null $association
     * @param null $merchant
     * @param null $dateBefore
     * @param null $dateAfter
     * @return User[]
     */
    public function search($page, $order, $cityhall, $roles, $lastname, $firstname, $enabled, $role = null, $association = null, $merchant = null, $dateBefore = null, $dateAfter = null)
    {
        $qb = $this->createQueryBuilder('c');


        if ($dateBefore) {
            $dateBefore = substr($dateBefore, 6, 4) . '-' . substr($dateBefore, 3, 2) . '-' . substr($dateBefore, 0, 2) . ' ' . substr($dateBefore, 11, 8);
            $qb->andwhere('c.createAt >= :dateBefore')->setParameter('dateBefore', $dateBefore);
        }
        if ($dateAfter) {
            $dateAfter = substr($dateAfter, 6, 4) . '-' . substr($dateAfter, 3, 2) . '-' . substr($dateAfter, 0, 2) . ' ' . substr($dateAfter, 11, 8);
            $qb->andWhere('c.createAt <= :dateAfter')->setParameter('dateAfter', $dateAfter);
        }
        if ($roles) {
            if(!in_array('ROLE_COMMUNITY_ADMIN',$roles)) {
                foreach ($roles as $r) {

                    $qb->andWhere('c.roles LIKE :role')->setParameter('role', '%' . $r . '%');
                }
            } else {
                $qb->andWhere('c.roles LIKE :role')->setParameter('role', '%ROLE_COMMUNITY_ADMIN%');
                $qb->orWhere('c.roles LIKE :role2')->setParameter('role2', '%ROLE_COMMUNITY_SU_ADMIN%');
            }
        }

        if ($cityhall) {
            if(in_array('ROLE_COMMUNITY_ADMIN',$roles)){
                $qb->andWhere(':community MEMBER OF c.adminCommunities');
                $qb->orWhere(':community MEMBER OF c.suAdminCommunities')->setParameter('community', $cityhall);
            }else{
                $qb->innerJoin('c.communities', 'cc');
                $qb->andWhere('cc.community = :community')->setParameter('community', $cityhall);
            }

        }
        if ($lastname) {
            $qb->andWhere('c.lastname LIKE :lastname')->setParameter('lastname', '%' . $lastname . '%');
        }
        if ($firstname) {
            $qb->andWhere('c.firstname LIKE :firstname')->setParameter('firstname', '%' . $firstname . '%');
        }
        if ($enabled != '') {
            $qb->andWhere('c.enabled = :enabled')->setParameter('enabled', $enabled);
        }
        if ($role != '') {
            if ($role == 'associationSuAdmin') {
                $qb->leftJoin('AppBundle:Association', 'a', 'WITH', 'a.suAdmin = c.id');
                if ($association) {
                    $qb->andwhere('a.id = :assocSu')->setParameter('assocSu', $association);
                }
            } elseif ($role == 'associationAdmin') {
                $qb->leftJoin('c.associationsAdmin', 'aA');
                if ($association) {
                    $qb->andwhere('aA.id = :assocA')->setParameter('assocA', $association);
                }
            } elseif ($role == 'merchantSuAdmin') {
                $qb->leftJoin('AppBundle:Merchant', 'm', 'WITH', 'm.suAdmin = c.id');
                if ($merchant) {
                    $qb->andwhere('m.id = :merchantSu')->setParameter('merchantSu', $merchant);
                }
            } elseif ($role == 'merchantAdmin') {
                $qb->leftJoin('c.merchantsAdmin', 'mM');
                if ($merchant) {
                    $qb->andwhere('mM.id = :merchantA')->setParameter('merchantA', $merchant);
                }
            }
        }
        //$qb->leftJoin('AppBundle:CommunityUsers', 'cu', 'WITH', 'cu.user = c.id');

        if (is_array($order)) {
            foreach ($order as $orderName => $orderType) {
                $qb->orderBy('c.' . $orderName, $orderType);
            }
        }

        if ($page !== false) {
            $qb->setMaxResults(25)
                    ->setFirstResult($page * 25);
        }
        return $qb->getQuery()->getResult();
    }

    public function findAllCitizensByCommunity($community, $returnQb = true, $fetchUserAssoSuAdmin = false, $fetchUserMerchantSuAdmin = false)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->innerJoin('u.communities', 'c');

        $qb->andWhere('u.roles LIKE :role')->setParameter('role', '%' . 'ROLE_CITIZEN' . '%');
        $qb->andWhere('u.roles NOT LIKE :role2')->setParameter('role2', '%' . 'ADMIN' . '%');
        $qb->andWhere('c.community = :community')->setParameter('community', $community);

        if ($fetchUserAssoSuAdmin) {
            $qb->leftJoin('u.associationsSuAdmin', 'asu')
                    ->orWhere('asu.community = :cityhallA')->setParameter('cityhallA', $community);
        }
        if ($fetchUserMerchantSuAdmin) {
            $qb->leftJoin('u.merchantsSuAdmin', 'msu')
                    ->orWhere('msu.community = :cityhallM')->setParameter('cityhallM', $community);
        }
        if ($returnQb) {
            return $qb;
        }

        return $qb->getQuery()->getResult();
    }

    public function findAllUsersByCommunity($community)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->innerJoin('u.communities', 'c');


        $qb->andWhere('c.community = :community')->setParameter('community', $community);
        $qb->andWhere('c.follow = :follow')->setParameter('follow', true);



        return $qb->getQuery()->getResult();
    }

    public function findAllCitizensAndAdmins($community, $returnQb = true, $fetchUserAssoSuAdmin = false, $fetchUserMerchantSuAdmin = false)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->innerJoin('u.communities', 'c');

        $qb->andWhere('u.roles LIKE :role')->setParameter('role', '%' . 'ROLE_CITIZEN' . '%');
        $qb->orWhere('u.roles NOT LIKE :role2')->setParameter('role2', '%' . 'ROLE_COMMUNITY_SU_ADMIN' . '%');
        $qb->andWhere(':community NOT MEMBER OF u.adminCommunities')->setParameter('community', $community);
        $qb->andWhere('c.community = :community')->setParameter('community', $community);

        if ($fetchUserAssoSuAdmin) {
            $qb->leftJoin('u.associationsSuAdmin', 'asu')
                ->orWhere('asu.community = :cityhallA')->setParameter('cityhallA', $community);
        }
        if ($fetchUserMerchantSuAdmin) {
            $qb->leftJoin('u.merchantsSuAdmin', 'msu')
                ->orWhere('msu.community = :cityhallM')->setParameter('cityhallM', $community);
        }

        $qb->andWhere('u.enabled = :enabled')->setParameter('enabled',true);
        if ($returnQb) {
            return $qb;
        }

        return $qb->getQuery()->getResult();
    }


    public function findAllSuAdmins($community, $returnQb = true, $fetchUserAssoSuAdmin = false, $fetchUserMerchantSuAdmin = false)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->innerJoin('u.communities', 'c');

        $qb->andWhere('u.roles LIKE :role')->setParameter('role', '%' . 'ROLE_CITIZEN' . '%');
        $qb->orWhere('u.roles NOT LIKE :role2')->setParameter('role2', '%' . 'ROLE_COMMUNITY_ADMIN' . '%');

        $qb->andWhere(':community NOT MEMBER OF u.suAdminCommunities')->setParameter('community', $community);
        $qb->andWhere('c.community = :community')->setParameter('community', $community);

        if ($fetchUserAssoSuAdmin) {
            $qb->leftJoin('u.associationsSuAdmin', 'asu')
                ->orWhere('asu.community = :cityhallA')->setParameter('cityhallA', $community);
        }
        if ($fetchUserMerchantSuAdmin) {
            $qb->leftJoin('u.merchantsSuAdmin', 'msu')
                ->orWhere('msu.community = :cityhallM')->setParameter('cityhallM', $community);
        }

        $qb->andWhere('u.enabled = :enabled')->setParameter('enabled',true);
        if ($returnQb) {
            return $qb;
        }

        return $qb->getQuery()->getResult();
    }



    public function findAllCitizensByCityhallAutocomplete($cityhall, $pattern, $fetchUserAssoSuAdmin = false, $fetchUserMerchantSuAdmin = false)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->leftJoin('u.communities','com');
        $qb->andWhere('com.community = :community')->setParameter("community", $cityhall);

        $qb->andWhere('u.roles LIKE :role')->setParameter('role', '%' . 'ROLE_CITIZEN' . '%');
        $qb->andWhere('u.email LIKE :email')->setParameter('email', '%' . $pattern . '%');

        if ($fetchUserAssoSuAdmin) {
            $qb->leftJoin('u.associationsSuAdmin', 'asu')
                    ->orWhere('asu.community = :cityhallA')->setParameter('cityhallA', $cityhall);
        }
        if ($fetchUserMerchantSuAdmin) {
            $qb->leftJoin('u.merchantsSuAdmin', 'msu')
                    ->orWhere('msu.community = :cityhallM')->setParameter('cityhallM', $cityhall);
        }

        $results = $qb->getQuery()->getResult();
        $users = array();
        if (is_array($results)) {
            foreach ($results as $result) {
                $users[] = $result->getEmail();
            }
        }
        return $users;
    }

    public function findAdminsByAutocomplete($cityhall, $pattern)
    {

        $qb = $this->createQueryBuilder('u');

        $qb->andWhere(':community MEMBER OF u.adminCommunities')->setParameter('community', $cityhall);

        $qb->andWhere('u.roles LIKE :role')->setParameter('role', '%' . 'ROLE_COMMUNITY_ADMIN' . '%');
        $qb->andWhere('u.email LIKE :email')->setParameter('email', '%' . $pattern . '%');
        $qb->andWhere('u.enabled = :enabled')->setParameter('enabled', true);


        $results = $qb->getQuery()->getResult();

        $users = array();
        if (is_array($results)) {
            foreach ($results as $result) {
                $users[] = $result->getEmail();
            }
        }
        return $users;
    }

    public function findAdmins($cityhall)
    {

        $qb = $this->createQueryBuilder('u');

        $qb->andWhere(':community MEMBER OF u.adminCommunities')->setParameter('community', $cityhall);

        $qb->andWhere('u.roles LIKE :role')->setParameter('role', '%' . 'ROLE_COMMUNITY_ADMIN' . '%');

        $qb->andWhere('u.enabled = :enabled')->setParameter('enabled', true);





        return $qb;
    }

    public function findCitizenForEventPersonalized($cityhall, $ageFrom, $ageTo, $monday, $tuesday, $wednesday, $thursday, $friday, $saturday, $sunday, $lessThanSix, $betweenSixTwelve, $betweenTwelveEighteen, $allChildrens, $category = null, $usersList = null)
    {
        $usersReturn = array();
        if ($usersList) {
            $users = array();
            foreach ($usersList as $u) {
                if ($u->getCommunity() && $u->getCommunity()->getId() == $cityhall->getId()) {
                    $users[] = $u;
                }
            }
        } else {
            $users = $this->findAllCitizensByCityhall($cityhall, false);
        }

        foreach ($users as $user) {
            $findAge = false;
            $findDays = false;
            $findChildrens = false;

            if ($category) {
                $findCategory = false;
                foreach ($user->getinterests() as $interest) {
                    if ($interest->getId() == $category->getId()) {
                        $findCategory = true;
                        break;
                    }
                }
            } else {
                $findCategory = true;
            }


            //check age
            $ageUser = $user->getAge();
            if ($ageUser) {
                if ($ageUser >= $ageFrom && $ageUser <= $ageTo) {
                    $findAge = true;
                }
            }

            //check days
            if ($monday && $user->getMonday()) {
                $findDays = true;
            }
            if ($tuesday && $user->getTuesday()) {
                $findDays = true;
            }
            if ($wednesday && $user->getWednesday()) {
                $findDays = true;
            }
            if ($thursday && $user->getThursday()) {
                $findDays = true;
            }
            if ($friday && $user->getFriday()) {
                $findDays = true;
            }
            if ($saturday && $user->getSaturday()) {
                $findDays = true;
            }
            if ($sunday && $user->getSunday()) {
                $findDays = true;
            }


            //check childrens
            if ($allChildrens) {
                $findChildrens = true;
            }
            if ($lessThanSix && $user->getLessThanSix()) {
                $findChildrens = true;
            }
            if ($betweenSixTwelve && $user->getBetweenSixTwelve()) {
                $findChildrens = true;
            }
            if ($betweenSixTwelve && $user->getBetweenTwelveEighteen()) {
                $findChildrens = true;
            }
            if ($betweenTwelveEighteen && $user->getBetweenTwelveEighteen()) {
                $findChildrens = true;
            }



            if ($findAge && $findDays && $findChildrens && $findCategory) {
                $usersReturn[] = $user;
            }
        }

        return $usersReturn;
    }

    public function findCitizenForEventPersonalizedByCity($city, $category, $ageFrom, $ageTo, $monday, $tuesday, $wednesday, $thursday, $friday, $saturday, $sunday, $lessThanSix, $betweenSixTwelve, $betweenTwelveEighteen, $allChildrens)
    {
        $qb = $this->createQueryBuilder('u');
        $qb
           ->join("u.interests", "i")
           ->andWhere('i.id = :category')
           ->setParameter('category', $category)
           ->join('u.city', 'c')
           ->andWhere('c.id = :city')
           ->setParameter('city', $city);
        
        $sql ="";
        if ($monday == 'true') {
            if ($sql) {
                $sql = $sql . " OR u.monday = :true ";
            } else {
                $sql = "u.monday = :true ";
            }
        }
        
        if ($tuesday == 'true') {
            if ($sql) {
                $sql = $sql . " OR u.tuesday = :true ";
            } else {
                $sql = "u.tuesday = :true ";
            }
        }
        if ($wednesday == 'true') {
            if ($sql) {
                $sql = $sql . " OR u.wednesday = :true ";
            } else {
                $sql = "u.wednesday = :true ";
            }
        }
        if ($thursday == 'true') {
            if ($sql) {
                $sql = $sql . " OR u.thursday = :true ";
            } else {
                $sql = "u.thursday = :true ";
            }
        }
        if ($friday == 'true') {
            if ($sql) {
                $sql = $sql . " OR u.friday = :true ";
            } else {
                $sql = "u.friday = :true ";
            }
        }
        if ($saturday == 'true') {
            if ($sql) {
                $sql = $sql . " OR u.saturday = :true ";
            } else {
                $sql = "u.saturday = :true ";
            }
        }
        if ($sunday== 'true') {
            if ($sql) {
                $sql = $sql . " OR u.sunday = :true ";
            } else {
                $sql = "u.sunday = :true ";
            }
        }
        
        if ($sql) {
            $qb
               ->andWhere($sql)
               ->setParameter('true', true);
        }
 
     
        
        if ($allChildrens == 'false') {
            $qb->andWhere('u.lessThanSix = :lessThanSix')
               ->setParameter('lessThanSix', $lessThanSix == 'false' ? false : true)
               ->andWhere('u.betweenSixTwelve = :betweenSixTwelve')
               ->setParameter('betweenSixTwelve', $betweenSixTwelve == 'false' ? false : true)
               ->andWhere('u.betweenTwelveEighteen = :betweenTwelveEighteen')
               ->setParameter('betweenTwelveEighteen', $betweenTwelveEighteen == 'false' ? false : true);
        }
        
        if ($ageFrom != '0' && $ageTo != '0') {
            $year = date("Y");
            $yearFrom   = $year - (int)$ageFrom;
            $yearTo     = $year - (int)$ageTo;
            $qb->andWhere('u.birthDate <= :yearFrom')
               ->setParameter('yearFrom', $yearFrom)
               ->andWhere('u.birthDate >= :yearTo')
               ->setParameter('yearTo', $yearTo);
        }
                
                
        return $qb->getQuery()->getResult();
    }

    public function getMatchedEventsPersonalized($user, $event)
    {
        $findAge = false;
        $findChildrens = false;
        $findDays = false;
        //check age
        $ageUser = $user->getAge();
        if ($ageUser) {
            if ($ageUser >= $event->getAgeFrom() && $ageUser <= $event->getAgeTo()) {
                $findAge = true;
            }
        }

        //check days
        if ($event->getMonday() && $user->getMonday()) {
            $findDays = true;
        }
        if ($event->getTuesday() && $user->getTuesday()) {
            $findDays = true;
        }
        if ($event->getWednesday() && $user->getWednesday()) {
            $findDays = true;
        }
        if ($event->getThursday() && $user->getThursday()) {
            $findDays = true;
        }
        if ($event->getFriday() && $user->getFriday()) {
            $findDays = true;
        }
        if ($event->getSaturday() && $user->getSaturday()) {
            $findDays = true;
        }
        if ($event->getSunday() && $user->getSunday()) {
            $findDays = true;
        }


        //check childrens
        if ($allChildrens) {
            $findChildrens = true;
        }
        if ($event->getLessThanSix() && $user->getLessThanSix()) {
            $findChildrens = true;
        }
        if ($event->getBetweenSixTwelve() && $user->getBetweenSixTwelve()) {
            $findChildrens = true;
        }
        if ($event->getBetweenTwelveEighteen() && $user->getBetweenTwelveEighteen()) {
            $findChildrens = true;
        }
        if ($event->getBetweenTwelveEighteen() && $user->getBetweenTwelveEighteen()) {
            $findChildrens = true;
        }



        if ($findAge && $findDays && $findChildrens) {
            return true;
        } else {
            return false;
        }
    }
    
    public function findInactiveAccount()
    {
        $qb = $this->createQueryBuilder('c');
        
        $now = new \DateTime();
        
        $lastLogin = new \DateTime($now->format("Y-m-d") . " 23:59:59");
        
        $lastLogin = $lastLogin->modify('-7 day');
        
        $qb->andwhere('c.lastLogin <= :lastLogin')->setParameter('lastLogin', $lastLogin->format('Y-m-d H:i:s'));
        
        return $qb->getQuery()->getResult();
    }
    
    public function findAccountHavePublished()
    {
        $now = new \DateTime();
        
        $createat = new \DateTime($now->format("Y-m-d") . " 23:59:59");
        
        $createat = $createat->modify('-7 day');
        
        $qbe = $this->createQueryBuilder('c');
        
        $qbe->innerJoin('AppBundle:Event', 'e', 'WITH', 'e.createBy = c.id');
                
        $qbe->where('e.createAt >= :createat')->setParameter('createat', $createat->format('Y-m-d H:i:s'));
        
        $re=$qbe->getQuery()->getResult();
                
        $qba = $this->createQueryBuilder('c');
        
        $qba->innerJoin('AppBundle:Article', 'a', 'WITH', 'a.createBy = c.id');
                
        $qba->where('a.createAt >= :createat')->setParameter('createat', $createat->format('Y-m-d H:i:s'));
        
        $ra = $qba->getQuery()->getResult();
         
        $result = array_unique(array_merge($re, $ra));
        
        return $result;
    }
}
